package com.kbstar.mbc.fc.foundation.bzcrudbus.config;

import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;



/**
 * 파라미터를 맵에 입력하는 처리를 담당한다.
 * 
 * @author 
 * @version 1.0
 * @see
 */
public class ParameterTransform {
    
    private ParameterConverter parameterConverter = null;
    
    private Logger logger = Logger.getLogger(ParameterTransform.class);
    
    public ParameterTransform() {
        parameterConverter = new ParameterConverter();
    }
    
    /**
     * 파라미터를 그리드 데이터 리스트로 세팅한다.
     * @param parameter
     * @param insertList
     * @param updateList
     * @param deleteList
     */
    public void setParameterToGridData(String componentId, String interfaceId, String parameterString, List insertList, List updateList, List deleteList) {

        /*
         * row 리스트 구하기
         */
        String[] rowStringList = parameterString.split("\\|");
        
        for (int i=0; i<rowStringList.length; i++) {
            System.out.println("rowStringList[" + i + "]" + rowStringList[i]);
        }
  
        
        /*
         * 헤더정보 세팅
         */
        String header = rowStringList[0];
        String[] headerList = header.split("\\^");

        /*
         * row별 처리
         */
        for (int i=1; i<rowStringList.length; i++) {
            
            String rowString = rowStringList[i];
            
            /*
             * column 리스트 구하기
             */
            String[] columnStringList = rowString.split("\\^");
            
            /*
             * 구분자 구하기(i:insert, u:update, d:delete)
             */
            String gubun = columnStringList[0];
            
            Map insertMap = new HashMap();
            Map updateMap = new HashMap();
            Map deleteMap = new HashMap();
            
            /*
             * column별 처리
             */
            for (int j=1; j<columnStringList.length; j++) {
                
                String columnString = columnStringList[j];	//컬럼데이터
                
                if (gubun.equals("i")) {//insert 인 경우
                    insertMap.put(headerList[j], getTypedData(componentId, interfaceId, headerList[j], columnString));
                    if (logger.isDebugEnabled()) {
                        logger.debug("insertMap : " + insertMap);
                    }
                    
                } else if (gubun.equals("u")) {//update 인 경우
                    updateMap.put(headerList[j], getTypedData(componentId, interfaceId, headerList[j], columnString));
                    if (logger.isDebugEnabled()) {
                        logger.debug("updateMap : " + updateMap);
                    }
                    
                } else if (gubun.equals("d")) {//delete 인 경우
                    deleteMap.put(headerList[j], getTypedData(componentId, interfaceId, headerList[j], columnString));
                    if (logger.isDebugEnabled()) {
                        logger.debug("deleteMap : " + deleteMap);
                    }
                }
            }

            /*
             * 등록 데이터 맵을 등록 데이터 리스트등록에 추가
             */
            if (insertMap.size() > 0) {
                
                insertList.add(insertMap);
            }
            
            /*
             * 수정 데이터 맵을 삭제 데이터 리스트등록에 추가
             */
            if (updateMap.size() > 0) {
                updateList.add(updateMap);
            }
            
            /*
             * 삭제 데이터 맵을 삭제 데이터 리스트등록에 추가
             */
            if (deleteMap.size() > 0) {
                deleteList.add(deleteMap);
            }
        }
    }
    
    /**
     * 파라미터를 자동으로 파싱하여 리스트를 반환
     * @param request
     * @return List
     */
    public List getParameterList(String componentId, String interfaceId, HttpServletRequest request) {
        
        List resultList = new ArrayList();
        
        Enumeration enumv = request.getParameterNames();
        
        Map map = new HashMap();
        while (enumv.hasMoreElements()) {
            String parameterName = (String)enumv.nextElement();
            map.put(parameterName, getTypedData(componentId, interfaceId, parameterName, request.getParameter(parameterName)));
        }
        
        if (logger.isDebugEnabled()) {
            logger.debug(" getParameterList map :" + map);
        }
        
        resultList.add(map);

        return resultList;
    }
    
    /**
     * 파라미터를 자동으로 파싱하여 맵을 반환(맵정의에 따라 변환)
     * @param request
     * @return Map
     */
    public Map getParameterMap(String componentId, String interfaceId, HttpServletRequest request) {
        
        Map resultMap = new HashMap();
        
        Enumeration enumv = request.getParameterNames();
        while (enumv.hasMoreElements()) {
            String parameterName = (String)enumv.nextElement();
            if (logger.isDebugEnabled()) {
                logger.debug("parameterName : " + parameterName);
            }
            resultMap.put(parameterName, getTypedData(componentId, interfaceId, parameterName, request.getParameter(parameterName)));
        }

        return resultMap;
    }
    
    /**
     * 자바객체로 변환된 데이터 반환
     * @param classId
     * @param dataName
     * @param dataValue
     * @return Object
     */
    private Object getTypedData(String componentId, String interfaceId, String dataName, String dataValue) {
        if (componentId == null || interfaceId == null) {
            return dataValue;
        } else {
            return parameterConverter.getTypedData(componentId, interfaceId, dataName, dataValue);
        }
    }
    
    
    /**
     * 라이트 그리드의 변경된 전체 행을 String타입의 맵 리스트로 반환
     * @param classId
     * @param dataName
     * @param dataValue
     * @return Object
     */
    public List getParamGridList(String parameterString) {
        
        List resultList = new ArrayList();

        /*
         * row 리스트 구하기
         */
        String[] rowStringList = parameterString.split("\\|");
        
        for (int i=0; i<rowStringList.length; i++) {
            System.out.println("rowStringList[" + i + "]" + rowStringList[i]);
        }
       
        /*
         * 헤더정보 세팅
         */
        String header = rowStringList[0];
        String[] headerList = header.split("\\^");

        /*
         * row별 처리
         */
        for (int i=1; i<rowStringList.length; i++) {
            
            Map map = new HashMap();
            
            String rowString = rowStringList[i];
            
            /*
             * column 리스트 구하기
             */
            String[] columnStringList = rowString.split("\\^");
            
            int size = columnStringList.length;
            String columnString = "";

            
            /*
             * column별 처리
             */
            for (int j=0; j<headerList.length; j++) {
                if(size>j){
                	
                      columnString = columnStringList[j];	//컬럼데이터
                }
                else{
                	 columnString = "";
                }
                map.put(headerList[j],columnString);
            }
            
            /*
             * 등록 데이터 맵을 등록 데이터 리스트등록에 추가
             */
            if (map.size() > 0) {            
                resultList.add(map);
            }
            
            if (logger.isDebugEnabled()) {
                logger.debug(" getParamGridList map :" + map);
            }
        }
       
        return resultList;
    }
    
    
    /**
     * 파라미터를 자동으로 파싱하여 맵을 반환
     * @param request
     * @return Map
     */
    public Map getParameterMap(HttpServletRequest request) {
        
        Map resultMap = new HashMap();
        
        Enumeration enumv = request.getParameterNames();
        while (enumv.hasMoreElements()) {
            String parameterName = (String)enumv.nextElement();
                 resultMap.put(parameterName,(String)request.getParameter(parameterName));
        }
        resultMap.remove("gridData");
        return resultMap;
    }

}
