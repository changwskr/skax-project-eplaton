package com.kbstar.mbc.fc.foundation.bzcrudbus.tcf;import java.lang.reflect.InvocationTargetException;import com.kbstar.mbc.fc.foundation.bzcrudbus.constant.Constants;import com.kbstar.mbc.fc.foundation.bzcrudbus.constant.TCFConstantErrcode;import com.kbstar.mbc.fc.foundation.bzcrudbus.exception.BTFSPException;import com.kbstar.mbc.fc.foundation.bzcrudbus.foundation.utility.ErrorCheckUtil;import com.kbstar.mbc.fc.foundation.bzcrudbus.log.IIfrsLogger;import com.kbstar.mbc.fc.foundation.bzcrudbus.log.IfrsLogHelper;import com.kbstar.mbc.fc.foundation.bzcrudbus.transfer.IFRSCommonDTO;import com.kbstar.mbc.fc.foundation.bzcrudbus.transfer.IFRSEvent;/** * <p> * Title: * </p> *  * <p> * Description: This is oversea banking package. * </p> *  *  * @version 1.0 *  */public class BTF {	private static BTF instance;	private IFRSEvent ifrsEvent;	private IFRSCommonDTO commonDTO;	private String transactionMode = null;	private IIfrsLogger logger;		/**	 * 	 * BTF에 대한 인스턴스를 생성한다.	 * 	 * @return BTF	 * 	 */	public static synchronized BTF getInstance() {		if (instance == null) {			try {				instance = new BTF();			} catch (Exception igex) {			}		}		return instance;	}	public static synchronized BTF getInstance(String transactionMode) {		if (instance == null) {			try {				instance = new BTF(transactionMode);			} catch (Exception igex) {			}		}		return instance;	}	public BTF() {	}	public BTF(String transactionMode) {		this.transactionMode = transactionMode;				if(transactionMode.equals(Constants.TRANSACTION_MODE_WAF)) {			logger = IfrsLogHelper.getWaf();		}		else {			logger = IfrsLogHelper.getServer();		}	}	/**	 * IFRSEvent을 가져오는 함수.	 * 	 * @return IFRSEvent	 */	public IFRSEvent getIFRSEvent() {		return ifrsEvent;	}	/**	 * 실행함수.	 * 	 * @param ppifrsevent	 *            IFRSEvent	 * @return IFRSEvent	 */	public IFRSEvent execute(IFRSEvent ppifrsevent) {		try {			ifrsEvent = ppifrsevent;			this.commonDTO = ifrsEvent.getCommonDto();			if(!isError()) {				switch ( this.transactionMode.charAt(0)) {					case 'S':					case 's':						ifrsEvent = BTF_SP.getInstance().execute(ifrsEvent);						break;					case 'W':					case 'w':						ifrsEvent = BTF_WP.getInstance().execute(ifrsEvent);						break;				}			}									BTF_End();		} 		// BTF_SP 에서 발생하는 Exception Catch.		catch (BTFSPException bse) {						ifrsEvent.setException(bse);			setBTFError(bse.getErrorCode(), bse.getMessage());					} 		catch (Exception ex) {			//ex.printStackTrace();			setBTFError(TCFConstantErrcode.EBTF001, TCFConstantErrcode.EBTF001_MSG);		}		return ifrsEvent;	}	/**	 * 	 * BTF 종료모듈.	 * 	 * @return boolean.	 * 	 */	public boolean BTF_End() {		try {			logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[BTF_End] begin");		} catch (Exception ex) {			//ex.printStackTrace();			setBTFError(TCFConstantErrcode.EBTF004, TCFConstantErrcode.EBTF004_MSG);			logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[BTF_End] error");			return false;		}		logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[BTF_End] end");		return true;	}	/**	 * 	 * 에러체킹유무관리.	 * 	 * @return boolean	 * 	 */private boolean isError() {				return ErrorCheckUtil.getInstance().isError(ifrsEvent.getCommonDto().getErrorCode().charAt(0));		/*		switch (ifrsEvent.getCommonDto().getErrorCode().charAt(0)) {			case 'e':			case 'b':			case 's':			case 'd':			case 'E':			case 'B':			case 'S':			case 'D':				return true;			default:				return false;		}		*/	}	/**	 * 	 * BTF 모듈에서의 에러체킹. *	 * 	 * @param errorcode	 *            String	 * 	 * @param message	 *            String	 * 	 */	private void setBTFError(String errorCode, String errorMsg) {		//	에러가 아닌경우 에러코드 설정		if(!isError()) {			ifrsEvent.getCommonDto().setErrorCode(errorCode);			ifrsEvent.getCommonDto().setErrorMsg(errorMsg);		}	}	/**	 * 	 * 업무컴포턴에서 발생된 Exception객을 저장관리하는 메소드.	 * 	 * @param _e	 *            Throwable	 * 	 */	private void BTF_Exception(Throwable _e) {		logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[BTF_Exception] begin");		Throwable cause = _e;		int count = 0;		while (cause != null) {			if (count > 100)				break;			if (cause instanceof InvocationTargetException) {				// logger.info(ifrsEvent.getCommonDto().getSeqNo(), ++count + "1:" + cause.getClass().getName());				cause = ((InvocationTargetException) cause).getTargetException();			} else if (cause instanceof Exception) {				// logger.info(ifrsEvent.getCommonDto().getSeqNo(), ++count + "2:" + cause.getClass().getName());				cause = ((Exception) cause);				break;			} else {				// logger.info(ifrsEvent.getCommonDto().getSeqNo(), ++count + "3:" + cause.getClass().getName());				cause = null;			}		}		// LOGEJ.getInstance().debug(TCFConstants.BTF_LOG_LEVEL,ifrsEvent,"Throwable Type : " + _e.getClass() );		String transactionNo = "No Transaction Number";		if (cause instanceof Exception) {			// logger.info(ifrsEvent.getCommonDto().getSeqNo(), "coses app exception ====:::" + cause.getClass().getName() );			cause.printStackTrace();			// Throwable객체를 EplatonAppException객테타입으로 캐스팅한다.			Exception _eee = (Exception) cause;		}		// BizAction class에서 발생한 exception 중 EplatonAppException이 아닌 경우		else {			cause.printStackTrace();			Exception ex = (Exception) cause;		}		logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[BTF_Exception] end");	}	/**	 * 	 * 국가별로 에러메시지 셋팅함수.	 * 	 * @param nationCode	 *            String.	 * 	 * @param exceptionCode	 *            String.	 * 	 * @return String.	 * 	 */	private String exceptionMessage(String nationCode, String exceptionCode) {		String exceptionMsg = "No message.";		try {			// 에러메시를 셋팅한다.			// 에러코드에 대한 DB을 조회한다.		}		// Exception message를 가져오다 문제가 생기면		// Log만 남기고 무시한다.		catch (Throwable _e) {			// Log.DelegateLogger.debug(header, _e);		}		return exceptionMsg;	}	/**	 * 	 * 업무단에서 발생한 에러를 에러코드와 메시지를 셋팅한다.	 * 	 * 형식 : EBIZ + 에러코드 + 메시지	 * 	 * 	 * 	 * Method exceptionOutput.	 * 	 * @param exceptionCode.	 * 	 * @param exceptionMessage.	 * 	 * @return String.	 * 	 */	private String exceptionOutput(String exceptionCode,	String exceptionMessage) {		setBTFError("EBIZ" + exceptionCode, exceptionMessage);		return "[Excpetion Code] : " + exceptionCode +		" / [Excpetion Message] : " + exceptionMessage + "^";	}	/**	 * 	 * Method manageFatalException.	 * 	 * @param developerMessage.	 * 	 * @param exceptionDetail.	 * 	 * @param exceptionCode.	 * 	 * @param exceptionMessage.	 * 	 * @throws BizDelegateException.	 * 	 */	private void manageFatalException(String header, String developerMessage,	String exceptionDetail, String exceptionCode,	String exceptionMessage) {	}	/**	 * 	 * Method manageFatalExceptionWithStackTrace.	 * 	 * @param developerMessage	 * 	 * @param t	 * 	 * @param exceptionCode	 * 	 * @param exceptionMessage	 * 	 * @throws BizDelegateException	 * 	 */	private void manageFatalExceptionWithStackTrace(String header,	String developerMessage,	Throwable t, String exceptionCode, String exceptionMessage) {	}}