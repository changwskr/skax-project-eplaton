package com.kbstar.mbc.fc.foundation.bzcrudbus.config;

import java.math.BigDecimal;
import java.sql.Date;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.jdom.Element;

/**
 * TrustForm에서 받은 데이터를 자바 객체로 변환
 * 
 * @author 
 * @version 1.0
 * @see
 *  
 */
public class ParameterConverter {
    
    
    /**
     * 부모노드와 맵을 입력받아 자바객체 타입으로 변환된 맵을  리턴한다.
     * @param parentNodeName
     * @param map
     * @return Map
     */
    public Map getSettingMap(String componentId, String interfaceId,Map map) {
        
        Map resultMap = new HashMap();	/* 결과맵 */
        
        Iterator iter = map.entrySet().iterator();
        
        while (iter.hasNext()) {
            Map.Entry entry = (Map.Entry)iter.next();
            String key = (String)entry.getKey();
            String value = (String)entry.getValue();
            resultMap.put(key, getTypedData(componentId, interfaceId, key, value));
        }
        
        return resultMap;
    }
    
    /**
     * 부모노드와 리스트를 입력받아 자바객체 타입으로 변환된 리스트를  리턴한다.
     * @param parentNodeName
     * @param list
     * @return List
     */
    public List getSettingList(String componentId, String interfaceId, List list) {
        
        List resultList = new ArrayList();	/* 결과리스트 */
        
        for (int i=0; i<list.size(); i++) {
            
            Map resultMap = new HashMap();
            
            Map map = (Map)list.get(i);

	        Iterator iter = map.entrySet().iterator();
	        
	        while (iter.hasNext()) {
	            Map.Entry entry = (Map.Entry)iter.next();
	            String key = (String)entry.getKey();
	            String value = (String)entry.getValue();
	            resultMap.put(key, getTypedData(componentId, interfaceId, key, value));
	        }
	        
	        resultList.add(resultMap);
        }
        
        return resultList;
 
    }
    
    /**
     * 부모노드와 해당 노드명을 입력받아 타입에 맞는 데이터 타입을 반환한다.
     * @param parentNodeName
     * @param childNodeName
     * @return String
     */
    public String getDataType(String componentId, String interfaceId, String nodeName, String childNodeName) {
        
        /*
         * root 엘리먼트
         */
        Element rootElement = ParameterInfo.getInstance().getDoc(componentId).getRootElement();
        
        /*
         * 해당 객체 엘리먼트
         */
        Element element = rootElement.getChild(interfaceId);
        
        /*
         * 해당 필드 엘리먼트
         */
        Element e = element.getChild(nodeName);
        
        /*
         * 해당 필드의 데이터 타입 반환
         */
        return e.getAttribute("type").getValue();
        
    }
    
    /**
     * 맵핑타입에 맞는 데이터를 반환한다.
     * @param componentId
     * @param interfaceId
     * @param nodeName
     * @param nodeValue
     * @return Object
     */
    public Object getTypedData(String componentId, String interfaceId, String nodeName, String nodeValue) {
        
        /*
         * root 엘리먼트
         */ 
        System.out.println("ParameterConverter Test getType Data!!!");
        System.out.println("componentId = " +componentId + ",  interfaceId = " + interfaceId + ", nodeName = " +nodeName + ", nodeValue = " + nodeValue);
        Element rootElement = ParameterInfo.getInstance().getDoc(componentId).getRootElement();

        /*
         * 해당 객체 엘리먼트
         */
        Element element = rootElement.getChild(interfaceId);

        /*
         * 해당 필드 엘리먼트
         */
        Element e = element.getChild(nodeName);

        /*
         * 해당 필드별 타입에 따른 값을 리턴
         */
        if (e != null && e.getAttribute("type") != null) {
            
	        if (e.getAttribute("type").getValue().equals("Integer")) {

	            return (Object)(new Integer(getDefaultValueData(e, nodeValue)));
	            
	        } else if (e.getAttribute("type").getValue().equals("Long")) {
	            
	            return (Object)(new Long(getDefaultValueData(e, nodeValue)));
	            
	        } else if (e.getAttribute("type").getValue().equals("Float")) {
	            
	            return (Object)(new Float(getDefaultValueData(e, nodeValue)));
	            
	        } else if (e.getAttribute("type").getValue().equals("Double")) {
	            
	            return (Object)(new Double(getDefaultValueData(e, nodeValue)));
	            
	        } else if (e.getAttribute("type").getValue().equals("BigDecimal")) {
	            
	            return (Object)(new BigDecimal(getDefaultValueData(e, nodeValue)));
	            
	        } else if (e.getAttribute("type").getValue().equals("Date")) {
	            
	            return (Object)(Date.valueOf(getDefaultValueData(e, nodeValue)));
	            
	        } else {
	            
	            return (Object)(new String(getDefaultValueData(e, nodeValue)));
	        }
        }
        
        return "";

    }
    

    /**
     * 엘리먼트의 값이 없을때 디폴트 값을 리턴
     * @param element
     * @param nodeValue
     * @return String
     */
    private String getDefaultValueData(Element element, String nodeValue) {
        
        if (nodeValue == null || nodeValue.equals("")) {
            return element.getAttribute("default").getValue();
        } else {
            return nodeValue;
        }
    }


}
