package com.kbstar.mbc.fc.foundation.bzcrudbus.tcf;

import java.io.FileOutputStream;
import java.io.PrintStream;
import java.rmi.RemoteException;

import javax.servlet.http.HttpServletRequest;

import com.kbstar.ksa.infra.po.KBData;
import com.kbstar.mbc.fc.foundation.bzcrudbus.constant.Constants;
import com.kbstar.mbc.fc.foundation.bzcrudbus.constant.TCFConstantErrcode;
import com.kbstar.mbc.fc.foundation.bzcrudbus.foundation.general.CommonUtil;
import com.kbstar.mbc.fc.foundation.bzcrudbus.foundation.utility.ErrorCheckUtil;
import com.kbstar.mbc.fc.foundation.bzcrudbus.log.IIfrsLogger;
import com.kbstar.mbc.fc.foundation.bzcrudbus.log.IfrsLogHelper;
import com.kbstar.mbc.fc.foundation.bzcrudbus.tpm.TPMUtil;
import com.kbstar.mbc.fc.foundation.bzcrudbus.transfer.IFRSCommonDTO;
import com.kbstar.mbc.fc.foundation.bzcrudbus.transfer.IFRSEvent;

/**
 * 
 * <p>
 * Title: IFRS
 * </p>
 * <p>
 * Description: This is oversea banking package.
 * </p>
 * 트랜잭션의 시작정보를 관리한다.
 * 
 * @author xx xx xx
 * @version 1.0
 */
public class STF {

	private static STF instance;

	private String transactionMode = null;

	private IFRSEvent ifrsEvent;

	private IFRSCommonDTO commonDTO;

	private IIfrsLogger logger;
	
	/**
	 * STF 인스턴스를 반환하는 함수.
	 * 
	 * @return STF
	 */
	public static synchronized STF getInstance() {
		if (instance == null) {
			try {
				instance = new STF();
			} catch (Exception ex) {
			}
		}
		return instance;
	}

	/**
	 * 생성자 함수.
	 */
	public STF() {
	}

	public STF(String transactionMode) {
		this.transactionMode = transactionMode;
		
		if(transactionMode.equals(Constants.TRANSACTION_MODE_WAF)) {
			logger = IfrsLogHelper.getWaf();
		}
		else {
			logger = IfrsLogHelper.getServer();
		}
	}

	/**
	 * 실행모듈
	 * 
	 * @param pevent
	 *            ifrsEvent
	 * @return ifrsEvent
	 */
	public IFRSEvent execute(IFRSEvent ppifrsEvent) {

		try {
			ifrsEvent = ppifrsEvent;
			commonDTO = (IFRSCommonDTO) ifrsEvent.getCommonDto();

			logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[STF_Init] begin");
			
			/*
			 * 기본적인 정보를 셋팅하는 함수 에러코드를 IZZZ000으로 맞춘다 시스템일자를 셋팅한다 시스템시간을 셋팅한다 영업일자를 셋팅한다.
			 */
			STF_Init();

			/*
			 * 에러가 발생하지 않은 경우만 로직을 진행시킨다
			 */
			if(isError()) {
				/*
				 * 에러가 난경우 STF의 마지막 로직을 가져온다
				 */
				logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[STF_Init] error");
				logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[STF_Init] end");
				logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[STF_End] begin");
				STF_End();
				logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[STF_End] end");
				
				return ifrsEvent;
			}
			else {
				/*
				 * 정상인경우 다음 처리를 위한 준비를 한다
				 */
				logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[STF_Init]success");
				logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[STF_Init] end");
				logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[STF_Middle] begin");
				STF_Middle();
				logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[STF_Middle] end");
			}
			
			logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[STF_End] begin");

			/*
			 * 시작트랜잭션의 마무리를 담당한다
			 */
			STF_End();
			logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[STF_End] end");
			
		} catch (Exception ex) {
			setSTFError(TCFConstantErrcode.ESTF003, TCFConstantErrcode.ESTF003_MSG);
		}

		return ifrsEvent;
	}

	/**
	 * 기본적인 정보를 셋팅하는 함수. 에러코드를 I0000000 으로 맞춘다. 트랜잭션의 시작을 알리기 위한 플래그를 셋팅한다. 시스템일자를 셋팅한다. 시스템시간을 셋팅한다. 영업일자를 셋팅한다. 통화코드를 셋팅한다.
	 * 
	 * @return boolean.
	 */
	public boolean STF_Init() {

		try {

			/*******************************************************************************************
			 *   WAF 단인 경우 로그인 여부 체크 (Code Added by 박기석)
			 *******************************************************************************************
			 * 
			 */
			
			switch ( this.transactionMode.charAt(0)) {
				case 'S':
				case 's':
					break;
				case 'W':
				case 'w':
					
					// WAF 단인 경우 로그인 여부 체크를 한다.
					boolean bLogin = isLogin(ifrsEvent.getServletRequest());
					
					if(!bLogin) {
						this.commonDTO.setErrorCode("E0000000");
						logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[STF_Init] Login Failed");
						return false;
					}
					else {
						break;
					}
			}
			
			/*
			 *  *****************************************************************************************
			 */
			
			/*********************************************************************************************************************
			 * 에러코드정보를 초기화한다.
			 ********************************************************************************************************************/
			
			logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[STF_Init] 에러코드정보를 초기화한다. ErrorCode Set :: I0000000");
			this.commonDTO.setErrorCode("I0000000");

			/*********************************************************************************************************************
			 * 시스템 날짜을 설정한다. # 에러남
			 ********************************************************************************************************************/
			//TimeProcess timeProcess = TimeProcess.getInstance();
			//String systemDateAndTime = timeProcess.getSystemDate(commonDTO.getTimeZone());
			//commonDTO.setSystemDate(systemDateAndTime.substring(0, 8));
			//logger.info(ifrsEvent.getCommonDto().getSeqNo(), "시스탬날짜을 설정한다. : " + commonDTO.getSystemDate());
			//String systemDateAndTime = timeProcess.getSystemDate(commonDTO.getTimeZone());
			commonDTO.setSysDate(CommonUtil.GetSysDate().substring(0, 8));
			
			/*********************************************************************************************************************
			 * 시스탬시간을 설정한다.
			 ********************************************************************************************************************/
			//systemDateAndTime = CommonUtil.GetSysTime();
			//commonDTO.setSystemInTime(systemDateAndTime.substring(8, 16));
			//logger.info(ifrsEvent.getCommonDto().getSeqNo(), "시스탬시간을 설정한다.System Time set :: " + commonDTO.getSystemInTime());

			/*********************************************************************************************************************
			 * 영업일자을 설정한다.
			 ********************************************************************************************************************/
			STF_GetBusinessDate();

			return true;

		} catch (Exception ex) {
			//ex.printStackTrace();
			setSTFError(TCFConstantErrcode.ESTF002, TCFConstantErrcode.ESTF002_MSG);
			return false;
		} finally {

		}
	}

	/**
	 * 현재 클라이언트에서나 서버에서의 트랜잭션의 시작정보를 관리한다. 만약 트랜잭션을 시작 했다면 기존 트랜잭션에 합류시키며 그렇지 않은 경우에는. 트랜잭션을 새로이 시작한다.
	 * 
	 * @return boolean
	 */
	public boolean STF_Middle() {
		try {

			/*
			 * 트랜잭션을 시작한다.
			 */
			if (TPMUtil.TPBegin()) {
				logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[STF_Middle] TPbegin() 성공");
			} else {
				setSTFError(TCFConstantErrcode.ESTF007, TCFConstantErrcode.ESTF007_MSG);
				logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[STF_Middle] TPbegin() 실패");
			}
			
			/*
			 * 사용자별 거래권한을 체킹한다.
			 */
			STF_SPtxctl();
			if (isError()) {
				return false;
			}

			/*
			 * 마감구분을 가진다.
			 */
			STF_SPeod();
			if (isError()) {
				return false;
			}

			/*********************************************************************************************************************
			 * 클라이언트의 호출정보를 보여준다. (TPFQ) ************************************************************************ 100 - 온라인 서버 -
			 * 서버 호출 200 - WAF 클라이언트 - 서버 300 - NATIVE 클라이언트 - 서버 호출 400 - ATM - 서버 호출 500 - INTERNET BANK - 서버 호출 600 - BATCH -
			 * 서버 호출
			 ********************************************************************************************************************/
			/* 
			 * 에러나서 switch 주석처리
			 */
			
			logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[STF_Middle] Check Call Transaction Location :: ");
			//switch (CommonUtil.Str2Int(commonDTO.getTpfq())) {
			switch (200) {
			case 100:/** server-server interchange */
				logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[STF_Middle] TPFQ : 100 ");
				break;
			case 200:/** waf clinet-server interchange */
				logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[STF_Middle] TPFQ : 200 ");
				break;
			case 300:/** native-server interchange */
				logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[STF_Middle] TPFQ : 300 ");
				break;
			case 400:/** atm client-server interchange */
				logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[STF_Middle] TPFQ : 400 ");
				break;
			case 500:/** internetbank-server interchange */
				logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[STF_Middle] TPFQ : 500 ");
				break;
			case 600:/** batch-server interchange */
				logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[STF_Middle] TPFQ : 600 ");
				break;
			default:
				logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[STF_Middle] TPFQ : not valid ");
				setSTFError(TCFConstantErrcode.ESTF009, TCFConstantErrcode.ESTF009_MSG);
				break;
			}

			if (isError()) {
				return false;
			}
			
			return true;

		} catch (Exception ex) {
			//ex.printStackTrace();
			setSTFError(TCFConstantErrcode.ESTF010, TCFConstantErrcode.ESTF010_MSG);
			//logger.info(ifrsEvent.getCommonDto().getSeqNo(), ".STF_Middle():" + ex.toString());

			return false;
		}
	}

	/**
	 * 트랜잭션 시작 종료모듈.
	 * 
	 * @return boolean
	 */
	public boolean STF_End() {
		try {

			/*********************************************************************************************************************
			 * 기본정보를 재셋팅한다.
			 ********************************************************************************************************************/
			logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[STF_End] 기본정보를 재셋팅한다. Set SystemOuttime ::");
			//commonDTO.setSystemOutTime(CommonUtil.GetSysTime());

			/*********************************************************************************************************************
			 * 패킷정보를 재셋팅한다.
			 ********************************************************************************************************************/
			logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[STF_End] 패킷정보를 재셋팅한다.Move Packet Rebuild ::");
			STF_MovePacket();

			/*********************************************************************************************************************
			 * 공통정보 로깅작을 실시한다.
			 ********************************************************************************************************************/
			logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[STF_End] begin]");
			if (!STF_SPcommonLog()) {
				logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[STF_End] STF_SPcommonLog() error");
			} else {
				logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[STF_End] STF_SPcommonLog() success");
			}
			
			logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[STF_End] true");

			// DB 에 로그처리하는 부분이 필요
			
			
			return true;
		} catch (Exception ex) {
			//ex.printStackTrace();
			setSTFError(TCFConstantErrcode.ESTF011, TCFConstantErrcode.ESTF011_MSG);

			return false;
		}
	}

	/**
	 * 에러여부 확인 모듈.
	 * 
	 * @return boolean.
	 */
	private boolean isError() {
		
		return ErrorCheckUtil.getInstance().isError(ifrsEvent.getCommonDto().getErrorCode().charAt(0));
		/*
		switch (ifrsEvent.getCommonDto().getErrorCode().charAt(0)) {
			case 'e':
			case 'b':
			case 's':
			case 'd':
			case 'E':
			case 'B':
			case 'S':
			case 'D':
				return true;
			default:
				return false;
		}
		*/
	}

	/**
	 * 
	 * 
	 * drop table TRANSACTION_UPDOWN;
	 * 
	 * CREATE TABLE TRANSACTION_UPDOWN ( terminalID VARCHAR2(100), terminalType VARCHAR2(100), xmlSeq VARCHAR2(100), bankCode
	 * VARCHAR2(100), branchCode VARCHAR2(100), glPostBranchCode VARCHAR2(100), channelType VARCHAR2(100), userID VARCHAR2(100),
	 * eventNo VARCHAR2(100), nation VARCHAR2(100), regionCode VARCHAR2(100), timeZone VARCHAR2(100), fxRateCount VARCHAR2(100),
	 * reqName VARCHAR2(100), systemDate VARCHAR2(100), businessDate VARCHAR2(100), transactionNo VARCHAR2(100), baseCurrency
	 * VARCHAR2(100), multiPL VARCHAR2(100), userLevel VARCHAR2(100), IPAddress VARCHAR2(100), req_name VARCHAR2(100), system_name
	 * VARCHAR2(100), operation_name VARCHAR2(100), operation_method VARCHAR2(100), cdto_name VARCHAR2(100), action_name
	 * VARCHAR2(100), hostseq VARCHAR2(100), orgseq VARCHAR2(100), tx_timer VARCHAR2(100), tpfq VARCHAR2(100), errorcode
	 * VARCHAR2(100), trclass VARCHAR2(100), web_timeout VARCHAR2(100), web_intime VARCHAR2(100), web_outtime VARCHAR2(100),
	 * systemInTime VARCHAR2(100), systemOutTime VARCHAR2(100), system_date VARCHAR2(100), error_message VARCHAR2(100),
	 * logic_level VARCHAR2(100), STF_intime VARCHAR2(100), STF_outtime VARCHAR2(100), BTF_intime VARCHAR2(100), BTF_outtime
	 * VARCHAR2(100), ETF_intime VARCHAR2(100), ETF_outtime VARCHAR2(100), INPUT_DTO VARCHAR2(4000), OUTPUT_DTO VARCHAR2(4000),
	 * CONSTRAINT TRANSACTION_UPDOWN PRIMARY KEY ( hostseq ) USING INDEX TABLESPACE TSP_CORE_IND ) TABLESPACE TSP_CORE ;
	 * 
	 * CREATE SYNONYM TRANSACTION_UPDOWN FOR CORE.TRANSACTION_UPDOWN; grant select,insert,update,delete on TRANSACTION_UPDOWN to
	 * eplaton;
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * @param event
	 * @return
	 */

	/**
	 * 트랜잭션 주요정보 파일로 전송모듈.
	 * 
	 * @return boolean.
	 */
	private boolean STF_SPcommonLog() {

		String LOGFILENAME = null;
		FileOutputStream fos = null;
		PrintStream ps = null;

		try {
			/*********************************************************************************************************************
			 * 트랜잭션의 OUTTIME을 다시 초기화한다.
			 ********************************************************************************************************************/
			LOGFILENAME = CommonUtil.GetHostName() + "." + commonDTO.getCommandId().substring(0,3).toUpperCase() + "." + "in" + "." + CommonUtil.GetSysDate();
			fos = new FileOutputStream(LOGFILENAME, true);
			ps = new PrintStream(fos);
			ps.println("pc_operation_name" + "|" + "hostseq" + "-" + com.kbstar.mbc.fc.foundation.bzcrudbus.foundation.utility.Reflector.objectToString(ifrsEvent));
			ps.flush();
			ps.close();
			fos.close();

		} catch (Exception e) {
			try {
				if (fos != null)
					fos.close();
				if (ps != null)
					ps.close();
			} catch (Exception ex) {
			}
			//e.printStackTrace();
			setSTFError(TCFConstantErrcode.ESTF015, TCFConstantErrcode.ESTF015_MSG);
			return false;
		}
		return true;
	}

	/*****************************************************************************************************************************
	 * 거래제어정보를 관리한다 ************************************************************************ 뱅크코드별 거래 제어 브렌치별 거래 제어 거래코드별 거래제어 텔러별
	 * 거래 제어 온라인 거래 제어 배치 거래 제어 온라인 거래만 허용 배치 거래만 허용
	 ****************************************************************************************************************************/

	/**
	 * 거래제어정보를 관리한다 ************************************************************************ 뱅크코드별 거래 제어 브렌치별 거래 제어 거래코드별 거래제어 텔러별
	 * 거래 제어 온라인 거래 제어 배치 거래 제어 온라인 거래만 허용 배치 거래만 허용
	 * 
	 * @return int
	 */
	private int STF_SPtxctl() {
		/*************************************************************************************************************************
		 * 일단 데이타베이스의 테이블로 관리 할 것이다 거래코드별, 단말별, 온라인/배치, 텔러별 나누어서 트랜잭션 제어정보를 관리 할 것임
		 ************************************************************************************************************************/
		try {

			/*
			 * 모든 온라인거래에 대한 제어 여부를 판별한다.
			 */
			logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[STF_SPtxctl] 모든 온라인거래에 대한 제어 여부를 판별한다");

			/*
			 * 모든 배치거래에 대한 제어 여부를 판별한다
			 */
			logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[STF_SPtxctl] 모든 배치거래에 대한 제어 여부를 판별한다");

			/*
			 * ATM 거래에 대한 제어여부를 관리한다
			 */
			logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[STF_SPtxctl] ATM 거래에 대한 제어여부를 관리한다");

			/*
			 * 인터넷뱅 거래에 대한 제어여부를 관리한다
			 */
			logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[STF_SPtxctl] 인터넷뱅 거래에 대한 제어여부를 관리한다");

			/*
			 * 거래코드에 대한 제어여부를 관리한다 10개의 거래코드 버럭을 지정 1000 - 1002 1010 - 1023 1099 - 1100 ....
			 */
			logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[STF_SPtxctl] 거래코드에 대한 제어여부를 관리한다");

			/*
			 * 뱅크코드에 대한 텔러별 제어 정보를 관리한다
			 */

			logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[STF_SPtxctl] 뱅크코드에 대한 텔러별 제어 정보를 관리한다");

			return 0;
		} catch (Exception ex) {
			setSTFError(TCFConstantErrcode.ESTF016, TCFConstantErrcode.ESTF016_MSG);

			return -1;
		}
	}

	/**
	 * 유저에서의 메뉴 퍼미선 확인.
	 * 
	 * @param commonDTO
	 *            IFRSCommonDTO
	 * @throws RemoteException
	 * @throws EplatonAppException
	 * @return boolean
	 */
	private boolean checkMenuPermission(IFRSCommonDTO commonDTO) {
		return true;
	}

	/**
	 * 마감전후 구분 필드를 세운다. ************************************************************************ = 시간상 관리의 경우 자동화기기 마감전후를 구분하여
	 * 마감구분 필드를 세운다. 토요일 : 13시 * 평 일 : 16시30 향후 이 로직을 위한 추가 로직을 구성한다.
	 * ************************************************************************ = 거래별 제어관리의 경우 시스템파라미터의 상태코드가 10인경우 : 모든 트랜잭션을 허용
	 * 시스템파라미터의 상태코드가 20인경우 : 모든 트랜잭션을 금지 시스템파라미터의 상태코드가 50인경우 : ATM/IBANK 관련된 거래만 허용
	 */
	private void STF_SPeod() {
		// 임시로 마감전으로 셋팅한다
		try {
			return;
		} catch (Exception ex) {
			setSTFError(TCFConstantErrcode.ESTF026, TCFConstantErrcode.ESTF026_MSG);

			return;
		}

	}

	/**
	 * 에러셋팅함수.
	 * 
	 * @param errorcode
	 *            String
	 * @param message
	 *            String
	 */
	private void setSTFError(String errorCode, String errorMsg) {
		//	에러가 아닌경우 에러코드 설정
		if(!isError()) {
			ifrsEvent.getCommonDto().setErrorCode(errorCode);
			ifrsEvent.getCommonDto().setErrorMsg(errorMsg);
		}
	}

	/**
	 * 패킷 재정의 함수.
	 */
	private void STF_MovePacket() {

		ifrsEvent.setCommonDto(this.commonDTO);

		/*
		 * 각 필드에 대한 정보를 재셋팅한다. (박대리 재빌딩 필요)
		 */

		KBData kbdata = ifrsEvent.getKbData();

	}

	/**
	 * 영업일자 구하는 함수.
	 * 
	 * @return String
	 */
	public String STF_GetBusinessDate() {
		String bizDt = null;
		try {
			commonDTO.setBizDate(CommonUtil.GetSysDate());
			bizDt = commonDTO.getBizDate();
		} catch (Exception ex) {
			setSTFError(TCFConstantErrcode.ESTF029, TCFConstantErrcode.ESTF029_MSG);
			return bizDt;
		}
		return bizDt;
	}
	
	// 사용자 로그인 여부 체크
	protected boolean isLogin(HttpServletRequest request) {
/*		
		String usrId = SsnBean.getUsrId(request);
		
		if (usrId != null && usrId.length() > 0) {
			return true;
		}
		else {
			return false;
		}
*/
		return true;
	}
}


/**
 * 트랜잭션 타임아웃 관리 모듈.
 * <p>
 * Title: ePlaton
 * </p>
 * <p>
 * Description: This is oversea banking package.
 * </p>
 * <p>
 * Copyright: Copyright (c) 2004 IMS System CO., LTD.
 * </p>
 * <p>
 * Company: IMS System
 * </p>
 * 
 * @author xx xx xx
 * @version 1.0
 */
class TimeoutEntry {
	public long beginTime = System.currentTimeMillis();

	public long timeout;

	public String value;

	public boolean isExpired() {
		return (System.currentTimeMillis() - beginTime) > timeout;
	}

	public String toString() {
		return "TimeoutEntry:{beginTime=" + beginTime + "}, {timeout=" + timeout + "}, {value=" + value + "}";
	}
}
