package com.kbstar.mbc.fc.foundation.bzcrudbus.foundation.utility;

import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.StringTokenizer;


public class Utils {

	
	/**
	 * 한 자리 숫자를 두 자리 숫자로 바꾸는 메소드
	 * 
	 * @param inum
	 * @return String
	 */
	public static String addZero(int inum) {
		String snum = String.valueOf(inum);
		if (snum.length() == 1) {
			return "0" + snum;
		}
		return snum;
	}
	
	public static String addPad(String inStr, int totalLen, String padChar, String leftRight) {
		
		if(inStr.length() >= totalLen) {
			return inStr;
		}
		
		StringBuffer padStr = new StringBuffer();
		
		for(int i=0; i<totalLen; i++) {
			if(i == totalLen - inStr.length()) {
				if(leftRight.equals("R")) {
					padStr.insert(0, inStr);
				}
				else {
					padStr.append(inStr);
				}
				break;
			}
			else {
				padStr.append(padChar);
			}			
		}
		
		return padStr.toString();
	}
	
	public static String addLeft(String inStr, int totalLen, String padChar) {
		return addPad(inStr, totalLen, padChar, "L");
	}
	
	public static String addRight(String inStr, int totalLen, String padChar) {
		return addPad(inStr, totalLen, padChar, "R");
	}
	
	/**
	 * 토큰으로 분리한 값의 카운트를 리턴하는 메소드
	 * 
	 * @param str
	 * @param token
	 * @return int
	 */
	public static int getTokenCount(String str, String token) {
		if (str == null) {
			return 0;
		}
		StringTokenizer st = new StringTokenizer(str, token);
		return st.countTokens();
	}

	
	/**
	 * '/' 값을 제거하는 메소드
	 * 
	 * @param str
	 * @return String
	 */
	public static String delSlash(String str) {
		if (str == null) {
			return "";
		}
		StringBuffer strdata = new StringBuffer();
		StringTokenizer st = new StringTokenizer(str, "/");
		while (st.hasMoreTokens()) {
			strdata.append(st.nextToken());
		}
		return strdata.toString();
	}

	/**
	 * ',' 값을 제거하는 메소드
	 * 
	 * @param str
	 * @return String
	 */
	public static String delRest(String str) {
		if (str == null) {
			return "";
		}
		StringBuffer strnum = new StringBuffer();
		StringTokenizer st = new StringTokenizer(str, ",");
		while (st.hasMoreTokens()) {
			strnum.append(st.nextToken());
		}
		return strnum.toString();
	}

	/**
	 * 값이 null 인 경우 공백을 리턴하는 메소드
	 * 
	 * @param value
	 * @return String
	 */
	public static String delNull(String value) {
		if (value == null) {
			return "";
		}
		else {
			return value;
		}
	}

	/**
	 * 화폐단위 형식의 숫자를 리턴하는 메소드 (이하 동일)
	 * 
	 * @param value
	 * @return String
	 */
	public static String numFormat(int value) {
		java.text.NumberFormat nf = NumberFormat.getInstance();
		return nf.format(value);
	}

	public static String numFormat(long value) {
		java.text.NumberFormat nf = NumberFormat.getInstance();
		return nf.format(value);
	}

	public static String numFormat(float value) {
		java.text.NumberFormat nf = NumberFormat.getInstance();
		return nf.format(value);
	}

	public static String numFormat(double value) {
		java.text.DecimalFormat nf = new DecimalFormat("#,##0.0####");
		return nf.format(value);
	}

	public static String numFormat(BigDecimal value) {
		if (value == null) {
			return "0";
		}
		java.text.NumberFormat nf = NumberFormat.getInstance();
		long val = value.longValue();
		return nf.format(val);
	}

	public static String numFormat(Integer value) {
		if (value == null) {
			return "0";
		}
		java.text.NumberFormat nf = NumberFormat.getInstance();
		long val = value.longValue();
		return nf.format(val);
	}

	public static String numFormat(Long value) {
		if (value == null) {
			return "0";
		}
		java.text.NumberFormat nf = NumberFormat.getInstance();
		long val = value.longValue();
		return nf.format(val);
	}

	public static String numFormat(Float value) {
		if (value == null) {
			return "0";
		}
		java.text.NumberFormat nf = NumberFormat.getInstance();
		float val = value.floatValue();
		return nf.format(val);
	}

	public static String numFormat(Double value) {
		if (value == null) {
			return "0";
		}
		java.text.DecimalFormat nf = new DecimalFormat("#,##0.0####");
		double val = value.doubleValue();
		return nf.format(val);
	}

	public static String numFormat(String value) {
		if (value == null) {
			return "0";
		}
		java.text.NumberFormat nf = NumberFormat.getInstance();
		long val = Long.parseLong(value);
		return nf.format(val);
	}

	public static String numFormatInt(double value) {
		java.text.DecimalFormat nf = new DecimalFormat("#,##0");
		return nf.format(value);
	}

	/**
	 * 문자열 가운데에 '-'를 붙여주는 메소드
	 * 
	 * @param str
	 * @param inum
	 * @return String
	 */
	public static String addMinus(String str, int inum) {
		if (str == null) {
			return "";
		}
		int len = str.length();
		String rtn = "";
		if (str.length() == 0 || str.length() < inum) {
			return "";
		}
		rtn = str.substring(0, inum - 1) + "-" + str.substring(inum - 1, len);
		return rtn;
	}

	/**
	 * 문자열 안에 '-' 값을 제거하는 메소드
	 * 
	 * @param str
	 * @return String
	 */
	public static String delMinus(String str) {
		if (str == null) {
			return "";
		}
		StringTokenizer st = new StringTokenizer(str, "-");
		StringBuffer sBuf = new StringBuffer();
		while (st.hasMoreTokens()) {
			sBuf.append(st.nextToken());
		}
		return sBuf.toString();
	}

	/**
	 * 문자열 안에 ':' 값을 제거하는 메소드
	 * 
	 * @param str
	 * @return String
	 */
	public static String delColon(String str) {
		if (str == null) {
			return "";
		}
		StringTokenizer st = new StringTokenizer(str, ":");
		StringBuffer sBuf = new StringBuffer();
		while (st.hasMoreTokens()) {
			sBuf.append(st.nextToken());
		}
		return sBuf.toString();
	}

	/**
	 * 문자열에 역슬래쉬를 추가하는 메소드
	 * 
	 * @param str
	 * @return String
	 */
	public static String addRevSlash(String str) {
		if (str == null || str == "") {
			return "";
		}
		StringBuffer content = new StringBuffer();
		char[] strchar = str.toCharArray();
		for (int i = 0 ; i < strchar.length ; i++) {
			if (strchar[i] == '\'') {
				content.append("\\" + "'");
			}
			else {
				content.append(strchar[i]);
			}
		}
		return content.toString();
	}

	/**
	 * 일자형식의 문자열로 변경하는 메소드
	 * 
	 * @param value
	 * @return String
	 */
	public static String toDate(String value) {
		if (value == null) {
			return "";
		}
		String rtn = "";
		int len = value.trim().length();
		if (len == 8) {
			rtn = value.substring(0, 4) + "/" + value.substring(4, 6) + "/" + value.substring(6, 8);
		}
		else if (len == 6) {
			rtn = value.substring(0, 4) + "/" + value.substring(4, 6);
		}
		else {
			rtn = "";
		}
		return rtn;
	}

	/**
	 * 사업자 등록번호에 '-'를 추가해서 리턴하는 메소드
	 * 
	 * @param value
	 * @return String
	 */
	public static String toCmpno(String value) {
		if (value == null) {
			return "";
		}
		String rtn = "";
		int len = value.trim().length();
		if (len == 10) {
			rtn = value.substring(0, 3) + "-" + value.substring(3, 5) + "-" + value.substring(5, 10);
		}
		else {
			rtn = "";
		}
		return rtn;
	}

	/**
	 * 주민번호 문자열에 '-'를 추가해서 리턴하는 메소드
	 * 
	 * @param value
	 * @return String
	 */
	public static String toJumin(String value) {
		if (value == null) {
			return "";
		}
		String rtn = "";
		int len = value.trim().length();
		if (len == 13) {
			rtn = value.substring(0, 6) + "-" + value.substring(6, 13);
		}
		else {
			rtn = "";
		}
		return rtn;
	}

	/**
	 * 우편번호 문자열에 '-'를 추가해서 리턴하는 메소드
	 * 
	 * @param value
	 * @return String
	 */
	public static String toPostno(String value) {
		if (value == null) {
			return "";
		}
		String rtn = "";
		int len = value.trim().length();
		if (len == 6) {
			rtn = value.substring(0, 3) + "-" + value.substring(3, 6);
		}
		else {
			rtn = "";
		}
		return rtn;
	}

	/**
	 * 시간단위 표시를 해서 반환하는 메소드
	 * 
	 * @param value
	 * @return String
	 */
	public static String toTime(String value) {
		if (value == null) {
			return "";
		}
		String rtn = "";
		int len = value.trim().length();
		if (len == 6) {
			rtn = value.substring(0, 2) + ":" + value.substring(2, 4) + ":" + value.substring(4, 6);
		}
		else if (len == 4) {
			rtn = value.substring(0, 2) + ":" + value.substring(2, 4);
		}
		else {
			rtn = "";
		}
		return rtn;
	}

	public static String toEnc(String str, String inCharSet, String ourCharSet) {
		try {
			if (str != null) {
				return (new String(str.getBytes(inCharSet), ourCharSet));
			}
		}
		catch (UnsupportedEncodingException e) {
			System.err.println("Encoding Error Ksc2Uni : " + e);
		}
		return str;
	}
	
	/**
	 * 현재 시스템 일자를 반환하는 메소드
	 * 
	 * @return String
	 */
	public static String getSysDate() {
		SimpleDateFormat dt = new SimpleDateFormat("yyyy/MM/dd");
		java.util.Date curTime = new java.util.Date();
		return dt.format(curTime);
	}

	/**
	 * 현재 시스템 일자를 한글명으로 변환하는 메소드
	 * 
	 * @return String
	 */
	public static String getSysDateToKor() {
		String date = getSysDate("");
		date = date.substring(0, 4) + "년 " + date.substring(4, 6) + "월 " + date.substring(6, 8) + "일 ";
		
		return date;
	}
	
	/**
	 * 현재 시스템 일자를 형식에 맞게 반환하는 메소드
	 * 
	 * @param token
	 * @return String
	 */
	public static String getSysDate(String token) {
		SimpleDateFormat dt = new SimpleDateFormat("yyyy" + token + "MM" + token + "dd");
		java.util.Date curTime = new java.util.Date();
		return dt.format(curTime);
	}

	/**
	 * 현재 시스템 일자, 시간을 반환하는 메소드
	 * 
	 * @return String
	 */
	public static String getSysDateTime() {
		SimpleDateFormat dt = new SimpleDateFormat("yyyyMMddHHmmss");
		java.util.Date curTime = new java.util.Date();
		return dt.format(curTime);
	}

	/**
	 * Method Description area
	 * 
	 * @return
	 */
	public static String getCurTime() {
		SimpleDateFormat dt = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
		java.util.Date curTime = new java.util.Date();
		return dt.format(curTime);
	}

	/**
	 * 현재 시스템 일자, 시간을 형식에 맞게 반환하는 메소드
	 * 
	 * @param token
	 * @return String
	 */
	public static String getCurTime(String token) {
		SimpleDateFormat dt = new SimpleDateFormat("yyyy" + token + "MM" + token + "dd HH:mm:ss");
		java.util.Date curTime = new java.util.Date();
		return dt.format(curTime);
	}

	
	
	/**
	 * 변수에 null 또는 공백인지 확인해주는 메소드
	 * 
	 * @param src
	 * @return boolean
	 */	
	public static boolean isEmpty(String str)
	{
		if(str == null) 
		{
			return true;
		} 
		else if (str.equals("") || str.equals("null"))
		{
			return true;
		} 
		else
		{
		      	return false;
		}
	}	

	public static Iterator snapshotIterator(Collection collection) {
        return new ArrayList(collection).iterator();
    }
	
	public static void main(String[] args) { 
		
		System.out.println("LPAD : " + Utils.addLeft("123", 8, "0"));
		System.out.println("RPAD : " + Utils.addRight("124", 8, "0"));
		//System.out.println(getDiffOfDays("20071201", "20071201"));
		//strCutSize("ㄱㄴㄷㄹㅁㅂㅅㅇㅈㅊㅋㅌㅍㅎㅏㅑㅓㅕㅗㅛㅜㅠㅢ", 100, false);
	}
	
	
}
