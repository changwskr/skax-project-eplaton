package com.kbstar.mbc.fc.foundation.bzcrudbus.dao;



import com.kbstar.mbc.fc.foundation.bzcrudbus.business.dc.DCComExec;
import com.kbstar.mbc.fc.foundation.bzcrudbus.config.Env;
import com.kbstar.mbc.fc.foundation.bzcrudbus.foundation.utility.Utils;
import com.kbstar.mbc.fc.foundation.bzcrudbus.log.IIfrsLogger;
import com.kbstar.mbc.fc.foundation.bzcrudbus.log.IfrsLogHelper;

/**
 * 
 *
 * @author   
 * @version 1.0
 * @see
 */
public class IfrsCommonDAO {
    
	private static IfrsCommonDAO instance;
    
    private IIfrsLogger logger = IfrsLogHelper.getCom();
    
    public static synchronized IfrsCommonDAO getInstance() {
		if (instance == null) {
			instance = new IfrsCommonDAO();
		}
		return instance;
	}
    
    public IfrsCommonDAO() {
        
    }

    public String getWafSeq() {
    	
    	String seq = null;
    	
    	try {
    		seq = CommonDAO.getInstance().readData("common.getWafSeq", null);
    		seq = "W" + Utils.addLeft(seq, 8, "0");
    		logger.infoF("[WAF SEQ 채번] #"+seq);
    	}
    	catch(Exception e) {
    		logger.infoF("[WAF SEQ 채번] error");
    		e.printStackTrace();
    	}
    	return seq;
    }
    
    public String getSvrSeq() {
    	
    	String seq = null;
    	
    	try {
    		String sqlId = Env.getProperty("IfrsCommonDAO.SEQ_SQL_ID");
    		//seq = CommonDAO.getInstance().readData(sqlId, null);
    		seq = DCComExec.getInstance().readString(sqlId, null);
    		seq = "S" + Utils.addLeft(seq, 8, "0");
    		logger.infoF("[SERVER SEQ 채번] #"+seq);
    	}
    	catch(Exception e) {
    		logger.infoF("[SERVER SEQ 채번] error");
    		e.printStackTrace();
    	}
    	return seq;
    }
    
}

