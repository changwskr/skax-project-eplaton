package com.kbstar.mbc.fc.foundation.bzcrudbus.kesa;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dom4j.Attribute;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;

import com.kbstar.mbc.fc.foundation.bzcrudbus.config.Env;
import com.kbstar.mbc.fc.foundation.bzcrudbus.constant.Constants;
import com.kbstar.mbc.fc.foundation.bzcrudbus.foundation.utility.Dom4jUtil;
import com.kbstar.mbc.fc.foundation.bzcrudbus.foundation.utility.Utils;

public class KesaXmlManager {

	private static KesaXmlManager instance;
	
	private HashMap headerAttrNameMap = null;
	private HashMap headerSvcAttrNameMap = null;
	
	public KesaXmlManager() {
		headerAttrNameMap = new HashMap();
		headerSvcAttrNameMap = new HashMap();
		
		String headerIdnt = Env.getProperty("KesaXmlManager.HEADER_NAMES");
		String headerSvcIdnt = Env.getProperty("KesaXmlManager.HEADER_SVC_NAMES");
		String headerSep = Env.getProperty("KesaXmlManager.HEADER_SEPERATOR").trim();
		
		String[] attrArray = headerIdnt.split(headerSep);
		
		// 헤더 속성 명 맵 생성
		for(int i=0; i<attrArray.length; i++) {
			headerAttrNameMap.put(attrArray[i], null);
		}
		
		String[] attrArray2 = headerSvcIdnt.split(headerSep);
		
		// 헤더 서비스 속성 명 맵 생성
		for(int j=0; j<attrArray2.length; j++) {
			headerSvcAttrNameMap.put(attrArray2[j], null);
		}
	}
	
	public static synchronized KesaXmlManager getInstance() {
        if (instance == null) {
            instance = new KesaXmlManager();
        }
        return instance;
    }
	
	private final String sendXml1 = "<KB-Message><Header StndCicsTrncd=\"\" StndIntnlStndTelgmLen=\"\" StndTranBaseYmd=\"\" StndGuIdNo=\"ed91950c-8d48-4b16-9ba3-af94eae47708\" StndTelgmDmndDstcd=\"S\" StndTelgmFmatDstcd=\"\" StndTelgmValdYmd=\"";
	private final String sendXml2 = "\"/><Common><TranInfo StndGroupCoCd=\"\" StndTelgmRecvTranCd=\"";
	private final String sendXml3 = "\" StndPrcssRtdTranCd=\"\" StndScrenNo=\"";
	private final String sendXml4 = "\" StndOsidInstiCd=\"\" StndTranSerno=\"000000000001\" StndInoPartlDstcd=\"1\" StndCmpxTranDmndDstcd=\"\" StndSysOperEvirnDstcd=\"T\" StndTranPtrnDstcd=\"\" StndRbndTranYn=\"\" StndTermlWaitRqstYn=\"\" StndOgtranRstrYn=\"\"/><ChnlInfo StndBnkCd=\"\" StndTranBrncd=\"0099\" StndRelayChnlDstcd=\"\" StndChnlDstcd=\"4004\" StndMdiaDstcd=\"TH\" StndLangDstcd=\"\" StndTrmno=\"71\" StndUserEmpid=\"3802737\" StndTermlOprtrno=\"\" StndTermlSpvsrNo=\"\" StndN2NdSpvsrBrncd=\"\" StndN2NdSpvsrTrmno=\"\"/><InMsgInfo StndInptMsgPtrnDstcd=\"\" StndInptMsgCtnnYn=\"\" StndInptMsgSerno=\"\" StndInptMsgWritYms=\"\"/><AthorInfo StndAthorFnshDstcd=\"\" StndSpvsrAthorDstcd=\"\" StndN1StSpvsrEmpid=\"\" StndN2NdSpvsrEmpid=\"\" StndSpvsrAResnNoitm=\"\" StndSpvsrAthorResnCd=\"\"/><EntrBnkBzwkCmn StndClsngAfYn=\"\" StndBnkbkTranYn=\"\" StndLsdtTranYn=\"\" StndIdtrek=\"\" StndSodBbrnPtrnDstcd=\"\" StndSodUserPtrnDstcd=\"\" StndInotAbilYn=\"\" StndNoRtaUserYn=\"\" StndTranDscnDmndYn=\"\" StndCallgPgmName=\"\" StndRecvLuName=\"\" StndCnclDstcd=\"\" StndCnclPtrnDstcd=\"\" StndTranCcResnDstcd=\"\" StndTranCcResnCtnt=\"\" StndOgtranYms=\"\" StndDscnTranDstcd=\"\" StndIdiviDataEdtYn=\"\" StndOpbrnCd=\"\"/><OutMsgInfo StndOutptDPtrnDstcd=\"\" StndOutptMsgPtrnDstcd=\"\" StndOutptMsgCtnnYn=\"\" StndOutptMsgSerno=\"\" StndOutptMsgWritYms=\"\" StndUserPaNotacrdYn=\"\"/><ErrInfo StndErrcd=\"\" StndTreatCd=\"\" StndCncutDscnRqstYn=\"\"/></Common></KB-Message>";
		
	// 기본적인 값이 설정된 xml
	private String getBaseXml(KesaXmlVO xmlVo) {
		StringBuffer strBuf = new StringBuffer();
		strBuf.append(sendXml1);
		// 현재 일자 설정
		strBuf.append(Utils.getSysDate(""));
		strBuf.append(sendXml2);
		// AS 명 설정
		strBuf.append(xmlVo.getAsName());
		strBuf.append(sendXml3);
		
		strBuf.append(xmlVo.getAsName());
		strBuf.append(sendXml4);
		
		return strBuf.toString();
	}
	
	
	// KESA 에 보낼 xml 전문 생성
	public String createXml(KesaXmlVO xmlVo) {
		String retStr = "";
		try {
			Document doc = DocumentHelper.parseText(getBaseXml(xmlVo));
			Element root = doc.getRootElement();
						
			Element individual = root.addElement(Constants.KESA_XML_INNODE_NAME1);
			
			Element dataHeader = individual.addElement(Constants.KESA_XML_INNODE_NAME2);
			
			Element inData = individual.addElement(Constants.KESA_XML_INNODE_NAME3);
						
			Element paramElmt = inData.addElement(xmlVo.getElementName());
			//Element paramElmt = inData.addElement(Constants.KESA_XML_INNODE_NAME4);
			
			HashMap<String, String> svcMap = xmlVo.getWafSvcMap();
			
			HashMap<String, String> inDataMap = xmlVo.getParamDataMap();
			Set set = inDataMap.keySet();
			
			// 헤더정보를 세팅
			String keyName = null;
			for (Iterator itr = Utils.snapshotIterator(set); itr.hasNext(); ) {
				keyName =  (String)itr.next();
				
				// 파라미터에 헤더 식별자가 있을 경우 헤더로 분류
				if(headerAttrNameMap.containsKey(keyName)) {
					dataHeader.addAttribute(keyName, (String)inDataMap.get(keyName));
				}
				else if(headerSvcAttrNameMap.containsKey(keyName)) {
					dataHeader.addAttribute(keyName, (String)svcMap.get(keyName));
				}
				// InData 로 분류
				else {
					paramElmt.addAttribute(keyName, (String)inDataMap.get(keyName));
				}
			}
			
			retStr = doc.asXML();
			
		}
		catch(Exception e) {
			retStr = "";
		}
		return retStr;
	}
	
	public String mci2Kesa(String mciXml, KesaXmlVO xmlVo) {
		String retStr = "";
		try {
			Document kesaDoc = DocumentHelper.parseText(getBaseXml(xmlVo));
			Element kesaRoot = kesaDoc.getRootElement();
			
			// Element 인덱스 맵
			HashMap<String, Element> kesaElmtMap = new HashMap<String, Element>();
			
			Element individual = kesaRoot.addElement(Constants.KESA_XML_INNODE_NAME1);
			
			Element dataHeader = individual.addElement(Constants.KESA_XML_INNODE_NAME2);
			
			Element inData = individual.addElement(Constants.KESA_XML_INNODE_NAME3);
			kesaElmtMap.put("InData", inData);
						
			Document mciDoc = Dom4jUtil.getDocument(mciXml);
			
			String mciRootPath = "/MciMessage/MsgBody";
		
			List mciElmtList = ((Element)mciDoc.selectSingleNode(mciRootPath)).elements();
			
			Element mciElmt = null;
			Map elmtMap = null;
			String elmtName = null;
			String elmtId = null;
			String fldValue = null;
			String kesaPrefixNode = "/KB-Message/Individual/";
			
			for (Iterator itr = Utils.snapshotIterator(mciElmtList); itr.hasNext(); ) {
				mciElmt =  (Element)itr.next();
				elmtName = mciElmt.getName();
				
				elmtId = ((Attribute)mciElmt.attribute("id")).getStringValue();
				
				// 데이터 필드 인 경우
				if(elmtName.equals("Fld")) {
					elmtId = ((Attribute)mciElmt.attribute("id")).getStringValue();
					fldValue = ((Attribute)mciElmt.attribute("value")).getStringValue();
					
					//System.out.println("FldId : " + fldId + ", FldValue : " + fldValue);
					addFldValue(elmtId, fldValue, kesaDoc, kesaPrefixNode, kesaElmtMap);
				}
				// 그리드인 경우
				else if(elmtName.equals("Grid")) {
					addGridData(elmtId, mciElmt, kesaDoc, kesaPrefixNode, kesaElmtMap);
				}
				
			}
			
			retStr = kesaDoc.asXML();
		}
		catch(Exception e) {
			retStr = "";
		}
		return retStr;
		
	}
	
	// MCI의 Fld 노드의 값을 KESA 노드의 속성값으로 세팅한다.
	public void addFldValue(String fldId, String fldValue, Document kesaDoc, String kesaPrefixNode, HashMap kesaElmtMap) {
		
		String[] nodeArray = fldId.split("/");
		String attrName = nodeArray[nodeArray.length-1];
		
		StringBuffer strBuf = new StringBuffer();
		
		for(int i=0; i<nodeArray.length-1; i++) {
    		strBuf.append(nodeArray[i]);
    		
    		if(i<nodeArray.length-2) {
    			strBuf.append("/");
    		}
		}
		
		String kesaNode = strBuf.toString();
		Element elmt = null;
		if(kesaElmtMap.containsKey(kesaNode)) {
			elmt = (Element)kesaElmtMap.get(kesaNode);
		}
		else {
			elmt = Dom4jUtil.getElement(kesaDoc, kesaPrefixNode+kesaNode, true);
			kesaElmtMap.put(kesaNode, elmt);
		}
		
		elmt.addAttribute(attrName, fldValue);
	}
	
	
	public void addGridData(String gridId, Element mciGridElmt, Document kesaDoc, String kesaPrefixNode, HashMap kesaElmtMap) {
		String[] nodeArray = gridId.split("/");
		String rowElmtName = nodeArray[nodeArray.length-1];
		
		StringBuffer strBuf = new StringBuffer();
		
		for(int i=0; i<nodeArray.length-1; i++) {
    		strBuf.append(nodeArray[i]);
    		
    		if(i<nodeArray.length-2) {
    			strBuf.append("/");
    		}
		}
		
		String kesaNode = strBuf.toString();
		Element kesaGridElmt = null;
		if(kesaElmtMap.containsKey(kesaNode)) {
			kesaGridElmt = (Element)kesaElmtMap.get(kesaNode);
		}
		else {
			kesaGridElmt = Dom4jUtil.getElement(kesaDoc, kesaPrefixNode+kesaNode, true);
			kesaElmtMap.put(kesaNode, kesaGridElmt);
		}
		
		List mciRowElmtList = mciGridElmt.elements();
		Element mciRowElmt = null;
		Element mciColElmt = null;
		Element kesaRowElmt = null;
		List mciColElmtList = null;
		String colId = null;
		String colText = null;
		
		for (Iterator itr = Utils.snapshotIterator(mciRowElmtList); itr.hasNext(); ) {
			mciRowElmt =  (Element)itr.next();

			mciColElmtList = mciRowElmt.elements();
			kesaRowElmt = kesaGridElmt.addElement(rowElmtName);
			for (Iterator itr2 = Utils.snapshotIterator(mciColElmtList); itr2.hasNext(); ) {
				mciColElmt =  (Element)itr2.next();

				colId = ((Attribute)mciColElmt.attribute("id")).getStringValue();
				colText = mciColElmt.getText();
				
				kesaRowElmt.addAttribute(colId, colText);				
			}
		}
	}
	
	private byte[] getFileXml(String fileStr) {
        File f;
        byte readByte[];
        BufferedInputStream bin;
        f = new File(fileStr);
        readByte = new byte[(int)f.length()];
        bin = null;
        try {
            bin = new BufferedInputStream(new FileInputStream(f), readByte.length);
            bin.read(readByte, 0, readByte.length);
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    
        return readByte;
    }

public static void main(String[] args) { 
		
		byte[] byteXml = KesaXmlManager.getInstance().getFileXml("c:/mci.xml");
		
		KesaXmlVO kesaXmlVo = new KesaXmlVO();
		kesaXmlVo.setAsName("MBC75001");
		
		System.out.println("KESA XML : " + KesaXmlManager.getInstance().mci2Kesa(new String(byteXml), kesaXmlVo));
	}
}
