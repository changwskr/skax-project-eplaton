package com.kbstar.mbc.fc.foundation.bzcrudbus.business.ic;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Vector;

import com.kbstar.mbc.fc.foundation.bzcrudbus.business.dc.DCComExec;
import com.kbstar.mbc.fc.foundation.bzcrudbus.exception.CommonDCException;
import com.kbstar.mbc.fc.foundation.bzcrudbus.exception.CommonPCException;
import com.kbstar.mbc.fc.foundation.bzcrudbus.transfer.IFRSCommonDTO;

/**
 * CommExecPC 공통 method 처리
 * 
 * @author WSJ
 * @version 1.0
 * 
 */
public class ICComExec implements IICComExec {

	private IFRSCommonDTO commonDTO;

	private HashMap fromMap;

	private HashMap toMap;

	/**
	 * 데이터를 한건의 값을 조회한다.
	 * 
	 * @param searchOption
	 * @throws FastException
	 * @return String
	 */
	public String getData(Map searchOption) throws CommonPCException {
		
		try {
			
			return DCComExec.getInstance().readData((String) searchOption.get("sqlId"), searchOption);
			
		} catch (CommonDCException dce) {
			throw new CommonPCException(dce.getErrorCode(), dce.toString());
		} catch (Exception e) {
			throw new CommonPCException("S9101001", e.toString());
		}

	}

	public String getData(IFRSCommonDTO commonDTO) throws CommonPCException {
		
		try {

			return DCComExec.getInstance().readData(commonDTO);
			
		} catch (CommonDCException dce) {
			throw new CommonPCException(dce.getErrorCode(), dce.toString());
		} catch (Exception e) {
			throw new CommonPCException("S9102001", e.toString());
		}

	}

	/**
	 * 데이터 리스트를 조회한다.
	 * 
	 * @param searchOption
	 * @throws CommonPCException
	 * @return List
	 */
	public List<HashMap> getList(Map searchOption) throws CommonPCException {
		
		try {

			return DCComExec.getInstance().readList((String) searchOption.get("sqlId"), searchOption);

		} catch (CommonDCException dce) {
			throw new CommonPCException(dce.getErrorCode(), dce.toString());
		} catch (Exception e) {
			throw new CommonPCException("S9103001", e.toString());
		}

	}

	public List<HashMap> getList(IFRSCommonDTO commonDTO) throws CommonPCException {
		
		try {
			
			return DCComExec.getInstance().readList(commonDTO);
			
		} catch (CommonDCException dce) {
			throw new CommonPCException(dce.getErrorCode(), dce.toString());
		} catch (Exception e) {
			throw new CommonPCException("S9104001", e.toString());
		}
	}

	
	
	
	/**
	 * 공통 저장 메소드(INSERT / UPDATE / DELETE 처리)
	 * 
	 * @param commonDTO
	 * @throws CommonPCException
	 * @return void
	 */
	public int saveData(Map searchOption) throws CommonPCException {
		
		try {

			return DCComExec.getInstance().save((String) searchOption.get("sqlId"), searchOption);

		} catch (CommonDCException dce) {
			throw new CommonPCException(dce.getErrorCode(), dce.toString());
		} catch (Exception e) {
			throw new CommonPCException("S9105001", e.toString());
		}

	}

	public int saveData(IFRSCommonDTO commonDTO) throws CommonPCException {
		
		try {
			
			return DCComExec.getInstance().save(commonDTO);
			
		} catch (CommonDCException dce) {
			throw new CommonPCException(dce.getErrorCode(), dce.toString());
		} catch (Exception e) {
			throw new CommonPCException("S9106001", e.toString());
		}
	}
	
	/**
	 * 공통 그리드 저장 메소드(INSERT / UPDATE / DELETE 복수 처리)
	 * 
	 * @param commonDTO
	 * @throws CommonPCException
	 * @return void
	 */
	
	public void insertList(IFRSCommonDTO commonDTO) throws CommonPCException {
		
		try {
			Map searchOption = commonDTO.getFromMap();
			Vector gridList = null;
						
			String[] gridName = commonDTO.getGridName();

			if (gridName != null) {

				Map rowMap = null;
				String state = null;
				Object crudObj = null;
				
				for (int i = 0; i < gridName.length; i++) {

					gridList = (Vector) searchOption.get(gridName[i].trim());

					for (int j = 0; j < gridList.size(); j++) {
						rowMap = (Map) gridList.get(j);
						crudObj = rowMap.get("CRUD");
						
						if(crudObj == null) {
							state = "C";
						}
						else if(((String)crudObj).trim().equals("")) {
							state = "Z";
						}
						else {
							state = ((String)rowMap.get("CRUD")).toUpperCase();
						}

						if(state != null && state.equals("C")) {
							DCComExec.getInstance().save(commonDTO.getSqlId(), rowMap);
						}						
					}
				}
			}
		} catch (CommonDCException dce) {
			throw new CommonPCException(dce.getErrorCode(), dce.toString());
		} catch (Exception e) {
			throw new CommonPCException("S9107001", e.toString());
		}
	}

	public void updateList(IFRSCommonDTO commonDTO) throws CommonPCException {
		
		try {
			Map searchOption = commonDTO.getFromMap();
			Vector gridList = null;
						
			String[] gridName = commonDTO.getGridName();

			if (gridName != null) {

				Map rowMap = null;
				String state = null;
				Object crudObj = null;
				
				for (int i = 0; i < gridName.length; i++) {

					gridList = (Vector) searchOption.get(gridName[i].trim());

					for (int j = 0; j < gridList.size(); j++) {
						rowMap = (Map) gridList.get(j);
						crudObj = rowMap.get("CRUD");
						
						if(crudObj == null) {
							state = "U";
						}
						else if(((String)crudObj).trim().equals("")) {
							state = "Z";
						}
						else {
							state = ((String)rowMap.get("CRUD")).toUpperCase();
						}

						if(state != null && state.equals("U")) {
							DCComExec.getInstance().save(commonDTO.getSqlId(), rowMap);
						}						
					}
				}
			}
		} catch (CommonDCException dce) {
			throw new CommonPCException(dce.getErrorCode(), dce.toString());
		} catch (Exception e) {
			throw new CommonPCException("S9108001", e.toString());
		}
	}

	public void deleteList(IFRSCommonDTO commonDTO) throws CommonPCException {
	
		try {
			Map searchOption = commonDTO.getFromMap();
			Vector gridList = null;
						
			String[] gridName = commonDTO.getGridName();

			if (gridName != null) {

				Map rowMap = null;
				String state = null;
				Object crudObj = null;
				
				for (int i = 0; i < gridName.length; i++) {

					gridList = (Vector) searchOption.get(gridName[i].trim());

					for (int j = 0; j < gridList.size(); j++) {
						rowMap = (Map) gridList.get(j);
						crudObj = rowMap.get("CRUD");
						
						if(crudObj == null) {
							state = "D";
						}
						else if(((String)crudObj).trim().equals("")) {
							state = "Z";
						}
						else {
							state = ((String)rowMap.get("CRUD")).toUpperCase();
						}

						if(state != null && state.equals("D")) {
							DCComExec.getInstance().save(commonDTO.getSqlId(), rowMap);
						}						
					}
				}
			}
		} catch (CommonDCException dce) {
			throw new CommonPCException(dce.getErrorCode(), dce.toString());
		} catch (Exception e) {
			throw new CommonPCException("S9109001", e.toString());
		}
	}
	
	public void saveList(IFRSCommonDTO commonDTO) throws CommonPCException {
		
		try {
			Map searchOption = commonDTO.getFromMap();
			Vector gridList = null;
						
			String[] gridName = commonDTO.getGridName();

			if (gridName != null) {

				Map rowMap = null;
				String state = null;
				Object crudObj = null;
				
				for (int i = 0; i < gridName.length; i++) {

					gridList = (Vector) searchOption.get(gridName[i].trim());

					for (int j = 0; j < gridList.size(); j++) {
						rowMap = (Map) gridList.get(j);
						crudObj = rowMap.get("CRUD");

						if(crudObj == null) {
							state = "U";
						}
						else if(((String)crudObj).trim().equals("")) {
							state = "Z";
						}
						else {
							state = ((String)rowMap.get("CRUD")).toUpperCase();
						}
						
						if(state != null && state.equals("U")) {
							int rowCnt = DCComExec.getInstance().save(getSaveListSqlId("update", commonDTO.getSqlId()), rowMap);
							
							if(rowCnt <= 0) {
								DCComExec.getInstance().save(getSaveListSqlId("insert", commonDTO.getSqlId()), rowMap);
							}
						}
					}
				}
			}
		} catch (CommonDCException dce) {
			throw new CommonPCException(dce.getErrorCode(), dce.toString());
		} catch (Exception e) {
			throw new CommonPCException("S9110001", e.toString());
		}
	}

	public void saveGrid(IFRSCommonDTO commonDTO) throws CommonPCException {
		
		try {
			Map searchOption = commonDTO.getFromMap();
			Vector gridList = null;
						
			String[] gridName = commonDTO.getGridName();

			if (gridName != null) {

				Map rowMap = null;
				String state = null;
				Object crudObj = null;
				
				for (int i = 0; i < gridName.length; i++) {

					gridList = (Vector) searchOption.get(gridName[i].trim());

					for (int j = 0; j < gridList.size(); j++) {
						rowMap = (Map) gridList.get(j);
						crudObj = rowMap.get("CRUD");

						if(crudObj == null || ((String)crudObj).trim().equals("")) {
							state = "Z";
						}
						else {
							state = ((String)rowMap.get("CRUD")).toUpperCase();
						}
						
						switch (state.charAt(0)) {

							case 'C':
								
								DCComExec.getInstance().save(getSaveListSqlId("insert", commonDTO.getSqlId()), rowMap);
								break;
			
							case 'U':
								
								DCComExec.getInstance().save(getSaveListSqlId("update", commonDTO.getSqlId()), rowMap);
								break;
								
							case 'D':
								
								DCComExec.getInstance().save(getSaveListSqlId("delete", commonDTO.getSqlId()), rowMap);
								break;
						}
					}
				}
			}
		} catch (CommonDCException dce) {
			throw new CommonPCException(dce.getErrorCode(), dce.toString());
		} catch (Exception e) {
			throw new CommonPCException("S9111001", e.toString());
		}
	}

	public static String getSaveListSqlId(String command, String sqlId) {
			
		String[] sqlIdArr = sqlId.split("\\.");
		
		if(sqlIdArr.length > 1) {
			StringBuffer sBuf = new StringBuffer();
			for(int i=0; i<sqlIdArr.length; i++) {
				
				if(i == sqlIdArr.length-1) {
					sBuf.append(command);
					sBuf.append(sqlIdArr[i]);
				}
				else {
					sBuf.append(sqlIdArr[i]);
					sBuf.append(".");
				}
			}
			
			return sBuf.toString();
		}
		else {
			return command + sqlId;
		}
	}
	
}
