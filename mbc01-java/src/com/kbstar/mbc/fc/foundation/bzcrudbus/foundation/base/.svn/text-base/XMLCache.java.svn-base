package com.kbstar.mbc.fc.foundation.bzcrudbus.foundation.base;

import java.util.*;
import org.jdom.*;
import org.jdom.input.*;
import org.jdom.output.*;

/**
 * Doc 형태로 변환된 XML File들을 Cache에 저장해놓고, Document 형태로 반환한다.
 * @author 
 * @version 1.0
 */

public class XMLCache
{
    private static XMLCache instance;
    private static HandlerOption option;

    private Map docs;//Map기반의 Cache 사용

    /**
     * <p>A private Constructor</p>
     *
     */
    private XMLCache()
    {
        initialize();
    }

    /**
     * <p>자기 자신의 Instance를 생성해서 반환한다.</p>
     *
     * @return XMLCache  A singleton instance of XMLCache
     */
    public static synchronized XMLCache getInstance()
    {
        if (instance == null)
        {
            instance = new XMLCache();
        }
        return instance;
    }

    /**
     * <p>Doc을 담기위한 HashMap의 초기화를 수행한다.</p>
     *
     */
    private void initialize()
    {
        docs = Collections.synchronizedMap(new HashMap());
        option = new HandlerOption();
        option.setValidate(true);
    }

    /**
     * <p>Key(XML File name)에 해당하는 Doc Object를 cache에서 검색한후, </p>
     * <p>있으면, 해당 Doc의 Document Object를 반환하고, 없으면, 새롭게 </p>
     * <p>생성한 후, cache에 저장한후, Document를 반환한다.
     *
     * @param  key      찾고자 하는 XML File Name(path 포함)
     * @return Document 검색된 XML 파일에 대한 Document Object
     */
    public Document getXML(String key)
    {
        return getXML(key, null);
    }

    public Document getValidXML(String key)
    {
        return getXML(key, option);
    }

    /**
     * <p>Key(XML File name)에 해당하는 Doc Object를 cache에서 검색한후, </p>
     * <p>있으면, 해당 Doc의 Document Object를 반환하고, 없으면, 새롭게 </p>
     * <p>생성한 후, cache에 저장한후, Document를 반환한다.</p>
     *
     * @param  key      찾고자 하는 XML File Name(path 포함)
     * @param  option   새롭게 Doc을 생성하고자 할 경우에 사용되는 XMLHandler에 대한 옵션
     * @return Document 검색된 XML 파일에 대한 Document Object
     */
    public synchronized Document getXML(String key, HandlerOption option)
    {
        Doc doc = null;
        try
        {
            doc = (Doc)docs.get(key);
            if (doc == null)
            {
                doc = new Doc(key, option);
                docs.put(key, doc);
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        return doc.getDocument();
    }
}