package com.kbstar.mbc.fc.foundation.bzcrudbus.log;

import java.util.Enumeration;
import java.util.ResourceBundle;

import org.apache.log4j.Appender;
import org.apache.log4j.Category;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.Priority;
import org.apache.log4j.spi.LoggerRepository;
import org.apache.log4j.spi.LoggingEvent;

public class IfrsLoggerImpl implements IIfrsLogger {

	private Logger logger;
	private static final String SEQ_PREFIX = "[#";
	private static final String SEQ_POSTFIX = "]==========";
	private static final String F_PREFIX = "================";
	
	public IfrsLoggerImpl(Logger logger){
        this.logger = logger;
    }
	
	public void info(Object message, Throwable t)
    {
        logger.info(message, t);
    }

    public void info(Object message)
    {
        logger.info(message);
    }

    public void info(String seq, Object message)
    {
        logger.info(SEQ_PREFIX+seq+SEQ_POSTFIX+message);
    }
    
    public void infoF(Object message)
    {
        logger.info(F_PREFIX+message);
    }
    
	public void debug(Object message, Throwable t)
    {
        logger.debug(message, t);
    }

    public void debug(Object message)
    {
        logger.debug(message);
    }
    
    public void debug(String seq, Object message)
    {
        logger.debug(SEQ_PREFIX+seq+SEQ_POSTFIX+message);
    }
    
    public void debugF(Object message)
    {
        logger.debug(F_PREFIX+message);
    }
    
    public void error(Object message, Throwable t)
    {
        logger.error(message, t);
    }

    public void error(Object message)
    {
        logger.error(message);
    }

    public void error(String seq, Object message)
    {
        logger.error(SEQ_PREFIX+seq+SEQ_POSTFIX+message);
    }
    
    public void errorF(Object message)
    {
        logger.error(F_PREFIX+message);
    }
    
    public void fatal(Object message, Throwable t)
    {
        logger.fatal(message, t);
    }

    public void fatal(Object message)
    {
        logger.fatal(message);
    }
    
    public void fatal(String seq, Object message)
    {
        logger.fatal(SEQ_PREFIX+seq+SEQ_POSTFIX+message);
    }
    
    public void fatalF(Object message)
    {
        logger.fatal(F_PREFIX+message);
    }
    
    public void warn(Object message, Throwable t)
    {
        logger.warn(message, t);
    }

    public void warn(Object message)
    {
        logger.warn(message);
    }
    
    public void warn(String seq, Object message)
    {
        logger.warn(SEQ_PREFIX+seq+SEQ_POSTFIX+message);
    }
    
    public void warnF(Object message)
    {
        logger.warn(F_PREFIX+message);
    }
    
    public void trace(Object message, Throwable t)
    {
        logger.trace(message, t);
    }
    
    public void trace(Object message)
    {
        logger.trace(message);
    }
    
    public void trace(String seq, Object message)
    {
        logger.trace(SEQ_PREFIX+seq+SEQ_POSTFIX+message);
    }
    
    public void traceF(Object message)
    {
        logger.trace(F_PREFIX+message);
    }
    
	public void addAppender(Appender newAppender)
    {
        logger.addAppender(newAppender);
    }

    public void assertLog(boolean assertion, String msg)
    {
        logger.assertLog(assertion, msg);
    }

    public void callAppenders(LoggingEvent event)
    {
        logger.callAppenders(event);
    }

    public boolean equals(Object o)
    {
        return logger.equals(o);
    }

    public boolean getAdditivity()
    {
        return logger.getAdditivity();
    }

    public Enumeration getAllAppenders()
    {
        return logger.getAllAppenders();
    }

    public Appender getAppender(String name)
    {
        return logger.getAppender(name);
    }

    public Level getEffectiveLevel()
    {
        return logger.getEffectiveLevel();
    }

    public Level getLevel()
    {
        return logger.getLevel();
    }

    public LoggerRepository getLoggerRepository()
    {
        return logger.getLoggerRepository();
    }

    public String getName()
    {
        return logger.getName();
    }

    public Category getParent()
    {
        return logger.getParent();
    }

    public ResourceBundle getResourceBundle()
    {
        return logger.getResourceBundle();
    }

    public int hashCode()
    {
        return logger.hashCode();
    }

    public boolean isAttached(Appender appender)
    {
        return logger.isAttached(appender);
    }

    public boolean isDebugEnabled()
    {
        return logger.isDebugEnabled();
    }

    public boolean isEnabledFor(Priority level)
    {
        return logger.isEnabledFor(level);
    }

    public boolean isInfoEnabled()
    {
        return logger.isInfoEnabled();
    }

    public void l7dlog(Priority priority, String key, Object params[], Throwable t)
    {
        logger.l7dlog(priority, key, params, t);
    }

    public void l7dlog(Priority priority, String key, Throwable t)
    {
        logger.l7dlog(priority, key, t);
    }

    public void log(Priority priority, Object message, Throwable t)
    {
        logger.log(priority, message, t);
    }

    public void log(Priority priority, Object message)
    {
        logger.log(priority, message);
    }

    public void log(String callerFQCN, Priority level, Object message, Throwable t)
    {
        logger.log(callerFQCN, level, message, t);
    }

    public void removeAllAppenders()
    {
        logger.removeAllAppenders();
    }

    public void removeAppender(Appender appender)
    {
        logger.removeAppender(appender);
    }

    public void removeAppender(String name)
    {
        logger.removeAppender(name);
    }

    public void setAdditivity(boolean additive)
    {
        logger.setAdditivity(additive);
    }

    public void setLevel(Level level)
    {
        logger.setLevel(level);
    }

    public void setResourceBundle(ResourceBundle bundle)
    {
        logger.setResourceBundle(bundle);
    }

    public String toString()
    {
        return logger.toString();
    }

    public boolean isTraceEnabled()
    {
        return logger.isTraceEnabled();
    }

}
