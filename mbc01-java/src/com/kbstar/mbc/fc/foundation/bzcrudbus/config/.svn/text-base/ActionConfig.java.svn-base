package com.kbstar.mbc.fc.foundation.bzcrudbus.config;


/*
 * 작성된 날짜: 2008-07-22
 *
 * ActionConfig 데이터를 생성하고 관리한다.
 */

import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;

import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;

/**
 * @author ywahn
 *
 * Action 정의 Class
 */
public class ActionConfig {
	
	private static final String[] CONFIG_FILE = {};
		
	private HashMap actionMap = null;
	private HashMap elementMap = null;
	
	private static ActionConfig actionConfig = null;

	
	private static HashMap<String, ActionConfig> configMap = new HashMap<String, ActionConfig>();
	
	private ActionConfig(String[] configFile){
		
		try{
			actionMap = new HashMap();
			elementMap = new HashMap();
			
			for( int a=0; a<configFile.length; a++ ){
				
				InputStream inputStream = ParameterInfo.class.getResourceAsStream(configFile[a]);
		    	SAXBuilder builder = new SAXBuilder();
				Document doc = builder.build(inputStream);
				
				Collection col = doc.getRootElement().getChildren("command");
				Iterator i = col.iterator();
				while(i.hasNext()) {
		        	Element cmdEle = (Element)i.next();
		        	String id = cmdEle.getAttributeValue("id");
		        	String type = cmdEle.getAttributeValue("type");
		        	
		        	Collection col2 = cmdEle.getChildren("service");
		        	Iterator j = col2.iterator();
		        	ArrayList actionList = new ArrayList();
		        	while(j.hasNext())  {
			        	Element svcEle = (Element)j.next();
			        	String key = svcEle.getAttributeValue("key");
			        	String name = svcEle.getAttributeValue("name");
			        	String server = svcEle.getAttributeValue("server");
			        	String element = svcEle.getAttributeValue("element");
			        	String method = svcEle.getAttributeValue("method");
			        	String seq = svcEle.getAttributeValue("seq");
			        	String sqlId = svcEle.getAttributeValue("sql_id");
			        	
			        	elementMap.put(id+"."+key, element);
			        	
			        	CommandObj cmdObj = new CommandObj(type, key, name, server, element, method, seq, sqlId);
			        	actionList.add(cmdObj);
			        }
		        	
		        	if(actionMap.containsKey(id)){
		        	    System.out.println("***********************************************************");
		        	    System.out.println("** EXIST ID --   File Name :"+CONFIG_FILE[a]+",    ID :"+id);
		        	    System.out.println("***********************************************************");
		        	}
		        	actionMap.put(id,actionList);
		        }
			}
    	}catch( Exception e ){
    		e.printStackTrace();
    	}
	}
	
	public static synchronized ActionConfig getInstance(String bizCd){
		String bizCode = bizCd.toUpperCase();
		
		if(!configMap.containsKey(bizCode)){
			String[] configFile = new String[1];
			configFile[0] = IFRSConfig.getInstance().getInfo("ConfigFile", bizCode);
			configMap.put(bizCode, new ActionConfig(configFile));
		}
		
		return (ActionConfig) configMap.get(bizCode);
	}
	
	public static synchronized ActionConfig getInstance(){
		
		if( actionConfig == null ){
			actionConfig = new ActionConfig(CONFIG_FILE);
		}
		
		return actionConfig;
	}
	
	
	/**
	 * Command List Return
	 * @param id
	 * @return
	 */
	public ArrayList getCmdList(String id){
		return (ArrayList)actionMap.get(id);
	}
	
	public HashMap getElementMap() {
		return elementMap;
	}
	
	public boolean isEmpty(){
		return actionMap.isEmpty();
	}

}
