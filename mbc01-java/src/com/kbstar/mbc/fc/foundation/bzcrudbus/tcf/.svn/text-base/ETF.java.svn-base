package com.kbstar.mbc.fc.foundation.bzcrudbus.tcf;import com.kbstar.mbc.fc.foundation.bzcrudbus.constant.Constants;import com.kbstar.mbc.fc.foundation.bzcrudbus.constant.TCFConstantErrcode;import com.kbstar.mbc.fc.foundation.bzcrudbus.constant.TCFConstants;import com.kbstar.mbc.fc.foundation.bzcrudbus.foundation.general.CommonUtil;import com.kbstar.mbc.fc.foundation.bzcrudbus.foundation.utility.ErrorCheckUtil;import com.kbstar.mbc.fc.foundation.bzcrudbus.log.IIfrsLogger;import com.kbstar.mbc.fc.foundation.bzcrudbus.log.IfrsLogHelper;import com.kbstar.mbc.fc.foundation.bzcrudbus.tpm.TPMUtil;import com.kbstar.mbc.fc.foundation.bzcrudbus.transfer.IFRSCommonDTO;import com.kbstar.mbc.fc.foundation.bzcrudbus.transfer.IFRSEvent;/**  *  * <p>Title: ePlaton</p>  * <p>Description: This is oversea banking package.</p>  * Tranaction Control Framework중 트랜잭션 완료모듈.  * <p>Copyright: Copyright (c) 2004 IMS System CO., LTD.</p>  * <p>Company: IMS System</p>  * @author xx xx xx  * @version 1.0  */public class ETF {	private static ETF instance;	private String transaction_type = TCFConstants.CONTAINER_TRANSACTION_MSG;		private String transactionMode = null;	private IFRSEvent ifrsEvent;	private IFRSCommonDTO commonDTO;	private IIfrsLogger logger;		/**	 	 * ETF 생성함수.	 	 * @return ETF.	 	 */	public static synchronized ETF getInstance() {		if (instance == null) {			try {				instance = new ETF();			} catch (Exception igex) {			}		}		return instance;	}	/**	 	 * 생성자함수.	 	 */	public ETF() {	}	public ETF(String transactionMode) {		this.transactionMode = transactionMode;				if(transactionMode.equals(Constants.TRANSACTION_MODE_WAF)) {			logger = IfrsLogHelper.getWaf();		}		else {			logger = IfrsLogHelper.getServer();		}	}		/**	 	 * get IFRSEvent.	 	 * @return IFRSEvent	 	 */	public IFRSEvent getIFRSEvent() {		return this.ifrsEvent;	}	/**	 	 * 트랜잭션 완료 실행모듈.	 	 * @param pevent IFRSEvent.	 	 * @return IFRSEvent.	 	 */	public IFRSEvent execute(IFRSEvent pevent) {		try {			ifrsEvent = pevent;			logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[ETF_Init] begin");			ETF_Init();			logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[ETF_Init] end");			logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[ETF_Middle] begin");			ETF_Middle();			logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[ETF_Middle] end");			logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[ETF_End] begin");			ETF_End();			logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[ETF_End] end");		} catch (Exception ex) {			setETFError(TCFConstantErrcode.EETF001, TCFConstantErrcode.EETF001_MSG);			//logger.info(ifrsEvent.getCommonDto().getSeqNo(), ex.toString());		}		return ifrsEvent;	}	/**	 	 * 트랜잭션을 완료하기위한 초기모듈.	 	 * @return boolean	 	 */	public boolean ETF_Init() {		try {			/*************************************************************************			 			 * 기본정보를 가져온다.			 			 ************************************************************************/			commonDTO = (IFRSCommonDTO) ifrsEvent.getCommonDto();									return true;		} catch (Exception ex) {			//ex.printStackTrace();			setETFError(TCFConstantErrcode.EETF002, TCFConstantErrcode.EETF002_MSG);			return false;		}	}	/**	 	 * 트랜잭션을 완료하기위한 중간단계모듈.	 	 * @return boolean	 	 */	public boolean ETF_Middle() {		try {			/*************************************************************************			 			 * 웹컴포넌단 - EJB 서버단과의 TIMEOUT 관리			 			 *************************************************************************			 			 * 이 모듈은 TPSVCINFO의 TXTIMER을 기준으로서 관리한다			 			 * 즉 웹단에서 시작시간을 기초로 해서 현재시간을 기초로 해서 INTERVAL이 넘어서면			 			 * 다음 업무단의 로직을 처리하지 않고 바로 에러로 처리			 			 ************************************************************************/			logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[ETF_Middle] Check Transaction Timeout between WAF and EJB Tier ::");			return true;		} catch (Exception ex) {			//ex.printStackTrace();			setETFError(TCFConstantErrcode.EETF003, TCFConstantErrcode.EETF003_MSG);			return false;		}	}	/**	 	 * 트랜잭션 완료 종료모듈.	 	 * @return boolean	 	 */	public boolean ETF_End() {		try {			/*************************************************************************			 			 * 패킷정보를 재셋팅한다.			 			 ************************************************************************/			ETF_MovePacket();			/***************************************************************************			 			 * 트랜잭션에대한 로깅정보 데이타베이스에 저장한다.			 			 * 데이타베이스에 남기는 INPUT/OUTPUT 정보는 에러인경우에는 남기는 것이 어렵다.			 			 * 왜냐하면 USERTRANSACTION,CONTAINER 두가지 타입에 있어서 rollback()을 하는것이			 			 *  기본이므로 만약 에러발생시 여기서 DB 작업시 예외를 만들어 낼것이다.			 			 * 그러므로 에러가 발생시는 입력/출력 패킷을 남기지 않고 대신 파일로 남겨주는 것으로			 			 * 한다.			 			 * transaction_input:모든 서버로 요청된 정보를 관리한다			 			 * transaction_output:거래처리가 성공인경우만 관리한다			 			 * 대신 에러인경우 파일로 관리된다.			 			 **************************************************************************/			if (this.ifrsEvent.getCommonDto().getErrorCode().charAt(0) != 'E') {				logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[ETF_End] DbOutLog start");				if (!ETF_DbOutLog(ifrsEvent)) {					logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[ETF_End] DbOutLog error");				} else {					logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[ETF_End] DbOutLog success");				}				logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[ETF_End] DbOutLog end");			}			/***************************************************************************			 			 * 트랜잭션에대한 로깅정보를 관리한다.			 			 **************************************************************************/			logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[ETF_End] CommonLog start");			if (!ETF_CommonLog()) {				logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[ETF_End] CommonLog error");			} else {				logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[ETF_End] CommonLog success");			}			logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[ETF_End] CommonLog end");			/***************************************************************************			 			 * 트랜잭션에 대한 Commit / Rollback 을 관리한다			 			 * 현재 UserTransaction을 걸기위한 Tx Data Source 부분을 STF,ETF부분에서사용할수			 			 * 있는 구조를 설계해야 된다.			 			 * 일단은 구조만 가지고 간다. (향후변경)			 			 **************************************************************************/			logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[ETF_End] TProllback/TPcommit start");			/*********************************************************************			 			 * 트랜잭션 타입이 usertransaction 타입인경우의 트랜잭션을 완료하기 위한 로직			 			 *********************************************************************/			if(isError()) {				logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[ETF_End] Call - TProllback");				if (TPMUtil.TPRollback())					logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[ETF_End] TProllback-success");				else {					logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[ETF_End] TProllback-error");					setETFError(TCFConstantErrcode.EETF005, TCFConstantErrcode.EETF005_MSG);				}			}			else {				logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[ETF_End] Call - TPcommit");				if (TPMUtil.TPCommit())					logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[ETF_End] TPcommit-success");				else {					logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[ETF_End] TPcommit-error");					setETFError(TCFConstantErrcode.EETF006, TCFConstantErrcode.EETF006_MSG);				}			}						logger.info(ifrsEvent.getCommonDto().getSeqNo(), "[ETF_End] TProllback/TPcommit end");			return true;		} catch (Exception ex) {			ex.printStackTrace();			setETFError(TCFConstantErrcode.EETF004,			TCFConstantErrcode.EETF004_MSG);			return false;		}	}	/**	 	 * 트랜잭션 outbound 메시지을 db에 저장하는 모듈.	 	 * @param event IFRSEvent	 	 * @return boolean	 	 */	private boolean ETF_DbOutLog(IFRSEvent event) {		try {		} catch (Exception ex) {			//ex.printStackTrace();			setETFError(TCFConstantErrcode.EETF008, TCFConstantErrcode.EETF008_MSG);			return false;		}		return true;	}	/**	 	 * 트랜잭션 outbound 메시지을 파일에 저장하는 모듈.	 	 * @return boolean	 	 */	private boolean ETF_CommonLog() {		//        String LOGFILENAME = null;		//        FileOutputStream fos = null;		//        PrintStream ps = null;		//		//        try {		//            LOGFILENAME = CommonUtil.GetHostName() + "." + commonDTO.getHostAs().substring(0,3).toUpperCase() + "." + "out" + "." + CommonUtil.GetSysDate();		//            fos = new FileOutputStream(LOGFILENAME, true);		//            ps = new PrintStream(fos);		//            String message = com.kdb.eplaton.foundation.utility.Reflector.objectToString(ifrsEvent);		//            if (message.length() > 4000) {		//                message = message.substring(0, 4000);		//            }		//            ps.println(ifrsEvent.getTPSVCINFODTO().getOperation_name() + "|" +		//                    ifrsEvent.getTPSVCINFODTO().getOrgseq() + "-" + message);		//		//            ps.flush();		//            ps.close();		//            fos.close();		//		//        } catch (Exception e) {		//            try {		//                if (fos != null)		//                    fos.close();		//                if (ps != null)		//                    ps.close();		//            } catch (Exception ex) {}		//            setETFError(TCFConstantErrcode.EETF009,		//                    TCFConstantErrcode.EETF009_MSG);		//            LOGEJ.getInstance().edebug(TCFConstants.ETF_LOG_LEVEL,		//                    (IFRSEvent) ifrsEvent, e);		//            e.printStackTrace();		//            return false;		//        }		return true;	}	/**	 	 * 에러가 있는지 확인하는 모듈.	 	 * @return boolean	 	 */	private boolean isError() {				return ErrorCheckUtil.getInstance().isError(ifrsEvent.getCommonDto().getErrorCode().charAt(0));		/*		switch (ifrsEvent.getCommonDto().getErrorCode().charAt(0)) {			case 'e':			case 'b':			case 's':			case 'd':			case 'E':			case 'B':			case 'S':			case 'D':				return true;			default:				return false;		}		*/	}	/**	 	 * etf 모듈에서 에러가 나왔는 지 확인하는 모듈.	 	 * @param errorcode String	 	 * @param message String	 	 */	private void setETFError(String errorCode, String errorMsg) {		//	에러가 아닌경우 에러코드 설정		if(!isError()) {			ifrsEvent.getCommonDto().setErrorCode(errorCode);			ifrsEvent.getCommonDto().setErrorMsg(errorMsg);		}	}	/**	 	 * 클라이언트단과 서버단과의 어플리케이션 적인 타임아웃 관리.	 	 */	private void ETF_WebTxTimer() {		return;	}	/**	 	 * 주요트랜잭션정보 관리 모듈.	 	 */	private void ETF_SetTpmSvcInfo() {		return;	}	/**	 	 * outbound 패킷생성.	 	 */	private void ETF_MovePacket() {		try {			this.ifrsEvent.setCommonDto(this.commonDTO);			//////////////////////////////////////////////////////////////////////////			// 각 필드에 대한 정보를 재셋팅한다.			//////////////////////////////////////////////////////////////////////////		} catch (Exception ex) {			setETFError(TCFConstantErrcode.EETF001, TCFConstantErrcode.EETF001_MSG);			return;		}		return;	}	/**	 	 * 트랜잭션 실행여부 관리모듈.	 	 * @param offset int	 	 */	public void setETF_TxInfo(int offset) {	}	/**	 	 * 현재 트랜잭션 실행여부 정보 관리 모듈.	 	 * @return int	 	 */	public int getETF_TxInfo() {		return 0;	}}