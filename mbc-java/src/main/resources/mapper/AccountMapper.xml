<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kbstar.mbc.dc.accountdc.mapper.AccountMapper">

    <!-- 결과 맵 정의 -->
    <resultMap id="AccountResultMap" type="com.kbstar.mbc.dc.accountdc.dto.AccountDto">
        <id column="ACCOUNT_ID" property="accountId" jdbcType="VARCHAR"/>
        <result column="ACCOUNT_NUMBER" property="accountNumber" jdbcType="VARCHAR"/>
        <result column="ACCOUNT_TYPE" property="accountType" jdbcType="VARCHAR"/>
        <result column="BALANCE" property="balance" jdbcType="DECIMAL"/>
        <result column="CURRENCY" property="currency" jdbcType="VARCHAR"/>
        <result column="STATUS" property="status" jdbcType="VARCHAR"/>
        <result column="OPEN_DATE" property="openDate" jdbcType="TIMESTAMP"/>
        <result column="CLOSE_DATE" property="closeDate" jdbcType="TIMESTAMP"/>
        <result column="CREATED_DATE" property="createdDate" jdbcType="TIMESTAMP"/>
        <result column="UPDATED_DATE" property="updatedDate" jdbcType="TIMESTAMP"/>
    </resultMap>

    <!-- 계정 목록 조회 -->
    <select id="selectAccountList" resultMap="AccountResultMap" parameterType="com.kbstar.mbc.dc.accountdc.dto.AccountSearchDto">
        SELECT 
            ACCOUNT_ID,
            ACCOUNT_NUMBER,
            ACCOUNT_TYPE,
            BALANCE,
            CURRENCY,
            STATUS,
            OPEN_DATE,
            CLOSE_DATE,
            CREATED_DATE,
            UPDATED_DATE
        FROM ACCOUNT
        <where>
            <if test="searchKeyword != null and searchKeyword != ''">
                AND (ACCOUNT_NUMBER LIKE CONCAT('%', #{searchKeyword}, '%')
                OR ACCOUNT_TYPE LIKE CONCAT('%', #{searchKeyword}, '%'))
            </if>
            <if test="accountType != null and accountType != ''">
                AND ACCOUNT_TYPE = #{accountType}
            </if>
            <if test="status != null and status != ''">
                AND STATUS = #{status}
            </if>
            <if test="currency != null and currency != ''">
                AND CURRENCY = #{currency}
            </if>
            <if test="minBalance != null">
                AND BALANCE >= #{minBalance}
            </if>
            <if test="maxBalance != null">
                AND BALANCE &lt;= #{maxBalance}
            </if>
        </where>
        ORDER BY CREATED_DATE DESC
        <if test="pageSize > 0">
            LIMIT #{pageSize} OFFSET #{offset}
        </if>
    </select>

    <!-- 계정 총 개수 조회 -->
    <select id="selectAccountCount" resultType="int" parameterType="com.kbstar.mbc.dc.accountdc.dto.AccountSearchDto">
        SELECT COUNT(*)
        FROM ACCOUNT
        <where>
            <if test="searchKeyword != null and searchKeyword != ''">
                AND (ACCOUNT_NUMBER LIKE CONCAT('%', #{searchKeyword}, '%')
                OR ACCOUNT_TYPE LIKE CONCAT('%', #{searchKeyword}, '%'))
            </if>
            <if test="accountType != null and accountType != ''">
                AND ACCOUNT_TYPE = #{accountType}
            </if>
            <if test="status != null and status != ''">
                AND STATUS = #{status}
            </if>
            <if test="currency != null and currency != ''">
                AND CURRENCY = #{currency}
            </if>
            <if test="minBalance != null">
                AND BALANCE >= #{minBalance}
            </if>
            <if test="maxBalance != null">
                AND BALANCE &lt;= #{maxBalance}
            </if>
        </where>
    </select>

    <!-- 계정 상세 조회 -->
    <select id="selectAccountById" resultMap="AccountResultMap" parameterType="string">
        SELECT 
            ACCOUNT_ID,
            ACCOUNT_NUMBER,
            ACCOUNT_TYPE,
            BALANCE,
            CURRENCY,
            STATUS,
            OPEN_DATE,
            CLOSE_DATE,
            CREATED_DATE,
            UPDATED_DATE
        FROM ACCOUNT
        WHERE ACCOUNT_ID = #{accountId}
    </select>

    <!-- 계좌번호로 계정 조회 -->
    <select id="selectAccountByNumber" resultMap="AccountResultMap" parameterType="string">
        SELECT 
            ACCOUNT_ID,
            ACCOUNT_NUMBER,
            ACCOUNT_TYPE,
            BALANCE,
            CURRENCY,
            STATUS,
            OPEN_DATE,
            CLOSE_DATE,
            CREATED_DATE,
            UPDATED_DATE
        FROM ACCOUNT
        WHERE ACCOUNT_NUMBER = #{accountNumber}
    </select>

    <!-- 계정 등록 -->
    <insert id="insertAccount" parameterType="com.kbstar.mbc.dc.accountdc.dto.AccountDto">
        INSERT INTO ACCOUNT (
            ACCOUNT_ID,
            ACCOUNT_NUMBER,
            ACCOUNT_TYPE,
            BALANCE,
            CURRENCY,
            STATUS,
            OPEN_DATE,
            CLOSE_DATE,
            CREATED_DATE,
            UPDATED_DATE
        ) VALUES (
            #{accountId},
            #{accountNumber},
            #{accountType},
            #{balance},
            #{currency},
            #{status},
            #{openDate},
            #{closeDate},
            NOW(),
            NOW()
        )
    </insert>

    <!-- 계정 수정 -->
    <update id="updateAccount" parameterType="com.kbstar.mbc.dc.accountdc.dto.AccountDto">
        UPDATE ACCOUNT
        SET 
            ACCOUNT_NUMBER = #{accountNumber},
            ACCOUNT_TYPE = #{accountType},
            BALANCE = #{balance},
            CURRENCY = #{currency},
            STATUS = #{status},
            OPEN_DATE = #{openDate},
            CLOSE_DATE = #{closeDate},
            UPDATED_DATE = NOW()
        WHERE ACCOUNT_ID = #{accountId}
    </update>

    <!-- 계정 삭제 -->
    <delete id="deleteAccount" parameterType="string">
        DELETE FROM ACCOUNT
        WHERE ACCOUNT_ID = #{accountId}
    </delete>

    <!-- 계정 상태 변경 -->
    <update id="updateAccountStatus" parameterType="map">
        UPDATE ACCOUNT
        SET 
            STATUS = #{status},
            UPDATED_DATE = NOW()
        WHERE ACCOUNT_ID = #{accountId}
    </update>

    <!-- 잔액 업데이트 -->
    <update id="updateBalance" parameterType="map">
        UPDATE ACCOUNT
        SET 
            BALANCE = #{balance},
            UPDATED_DATE = NOW()
        WHERE ACCOUNT_ID = #{accountId}
    </update>

    <!-- 계정 타입별 통계 -->
    <select id="selectAccountStatsByType" resultType="map">
        SELECT 
            ACCOUNT_TYPE,
            COUNT(*) as count,
            SUM(BALANCE) as totalBalance,
            AVG(BALANCE) as avgBalance
        FROM ACCOUNT
        WHERE STATUS = 'ACTIVE'
        GROUP BY ACCOUNT_TYPE
        ORDER BY ACCOUNT_TYPE
    </select>

    <!-- 통화별 통계 -->
    <select id="selectAccountStatsByCurrency" resultType="map">
        SELECT 
            CURRENCY,
            COUNT(*) as count,
            SUM(BALANCE) as totalBalance,
            AVG(BALANCE) as avgBalance
        FROM ACCOUNT
        WHERE STATUS = 'ACTIVE'
        GROUP BY CURRENCY
        ORDER BY CURRENCY
    </select>

    <!-- 활성 계정 목록 조회 -->
    <select id="selectActiveAccounts" resultMap="AccountResultMap">
        SELECT 
            ACCOUNT_ID,
            ACCOUNT_NUMBER,
            ACCOUNT_TYPE,
            BALANCE,
            CURRENCY,
            STATUS,
            OPEN_DATE,
            CLOSE_DATE,
            CREATED_DATE,
            UPDATED_DATE
        FROM ACCOUNT
        WHERE STATUS = 'ACTIVE'
        ORDER BY ACCOUNT_NUMBER
    </select>

    <!-- 사용자별 계정 조회 -->
    <select id="selectAccountsByUserId" resultMap="AccountResultMap" parameterType="string">
        SELECT 
            a.ACCOUNT_ID,
            a.ACCOUNT_NUMBER,
            a.ACCOUNT_TYPE,
            a.BALANCE,
            a.CURRENCY,
            a.STATUS,
            a.OPEN_DATE,
            a.CLOSE_DATE,
            a.CREATED_DATE,
            a.UPDATED_DATE
        FROM ACCOUNT a
        INNER JOIN USER_ACCOUNT ua ON a.ACCOUNT_ID = ua.ACCOUNT_ID
        WHERE ua.USER_ID = #{userId}
        AND a.STATUS = 'ACTIVE'
        ORDER BY a.ACCOUNT_NUMBER
    </select>

    <!-- 고액 계정 조회 -->
    <select id="selectHighBalanceAccounts" resultMap="AccountResultMap" parameterType="decimal">
        SELECT 
            ACCOUNT_ID,
            ACCOUNT_NUMBER,
            ACCOUNT_TYPE,
            BALANCE,
            CURRENCY,
            STATUS,
            OPEN_DATE,
            CLOSE_DATE,
            CREATED_DATE,
            UPDATED_DATE
        FROM ACCOUNT
        WHERE BALANCE >= #{minBalance}
        AND STATUS = 'ACTIVE'
        ORDER BY BALANCE DESC
    </select>

</mapper> 